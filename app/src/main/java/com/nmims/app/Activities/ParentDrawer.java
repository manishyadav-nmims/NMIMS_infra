package com.nmims.app.Activities;import android.Manifest;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.pm.PackageManager;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.text.SpannableString;import android.text.TextUtils;import android.text.style.TextAppearanceSpan;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.TextView;import androidx.annotation.NonNull;import androidx.appcompat.app.ActionBarDrawerToggle;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.widget.Toolbar;import androidx.core.app.ActivityCompat;import androidx.core.view.GravityCompat;import androidx.drawerlayout.widget.DrawerLayout;import androidx.fragment.app.FragmentManager;import androidx.fragment.app.FragmentTransaction;import com.google.android.material.navigation.NavigationView;import com.google.firebase.analytics.FirebaseAnalytics;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import com.nmims.app.BuildConfig;import com.nmims.app.Fragments.Academic.DownloadFragment;import com.nmims.app.Fragments.Academic.ExamTimeTableFragment;import com.nmims.app.Fragments.Academic.Faculty_ParentChangePasswordFragment;import com.nmims.app.Fragments.Academic.ParentHomeFragment;import com.nmims.app.Fragments.Academic.SupportFragment;import com.nmims.app.Fragments.Academic.ViewInternalMarksFragment;import com.nmims.app.Helpers.CommonMethods;import com.nmims.app.Helpers.Config;import com.nmims.app.Helpers.DBHelper;import com.nmims.app.Helpers.MyLog;import com.nmims.app.Helpers.MyToast;import com.nmims.app.Helpers.NMIMSApplication;import com.nmims.app.Models.MyDate;import com.nmims.app.Models.MyPermission;import com.nmims.app.R;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Locale;import java.util.Timer;import java.util.TimerTask;public class ParentDrawer extends AppCompatActivity        implements NavigationView.OnNavigationItemSelectedListener {    private FragmentManager fm;    private int allowExitCount = 0;    private static TextView noInternetWarning, toolbarTitle, navHeaderName, navHeaderEmail;    private ActionBarDrawerToggle toggle;    private DatabaseReference databaseReference;    private static DBHelper dbHelper;    private FragmentTransaction ft;    private int REQUEST_PERMISSIONS_CODE_WRITE_STORAGE = 6;    public static boolean isStoragePermission = false;    private static String newVersion = "", currentVersion = "", forceUpdate = "", username="", sharedPrefschoolName="";    private NavigationView navigationView;    private Menu menu;    private FirebaseAnalytics mFirebaseAnalytics;    private TextView app_versionTv_P;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_parent_drawer);        //CommonMethods.handleSSLHandshake();        /////////////////CHECK FOR CRASH///////////////        mFirebaseAnalytics = FirebaseAnalytics.getInstance(this);        /////////////////CHECK FOR CRASH///////////////        Toolbar toolbar = findViewById(R.id.toolbar);        toolbarTitle = toolbar.findViewById(R.id.toolbar_title);        noInternetWarning = findViewById(R.id.noInternetWarning);        app_versionTv_P = findViewById(R.id.app_versionTv_P);        setSupportActionBar(toolbar);        databaseReference = FirebaseDatabase.getInstance().getReference();        DrawerLayout drawer = findViewById(R.id.drawer_layout);        navigationView = findViewById(R.id.nav_view);        toggle = new ActionBarDrawerToggle(this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);        drawer.addDrawerListener(toggle);        toggle.syncState();        navigationView.setNavigationItemSelectedListener(this);        menu = navigationView.getMenu();        navigationDrawerTextColorChange();        View headerView = navigationView.getHeaderView(0);        navHeaderName = headerView.findViewById(R.id.nav_titleP);        navHeaderEmail = headerView.findViewById(R.id.nav_subtitleP);        dbHelper = new DBHelper(this);        fm = getSupportFragmentManager();        ft = getSupportFragmentManager().beginTransaction();        ft.add(R.id.ParentHome, new ParentHomeFragment(),"NMIMS");        ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);        ft.addToBackStack("NMIMS");        ft.commit();        loadProfileData();        isStoragePermissionGranted();        checkAppVersion();        app_versionTv_P.setText("Version : "+BuildConfig.VERSION_NAME);        //////////////////INTERNET CONNECTION////////////////////////////        Timer timer = new Timer();        timer.schedule(new TimerTask() {            @Override            public void run()            {                runOnUiThread(new Runnable(){                    @Override                    public void run()                    {                        if(!isConnectingToInternet(ParentDrawer.this))                        {                            noInternetWarning.setVisibility(View.VISIBLE);                        }                        else                        {                            noInternetWarning.setVisibility(View.GONE);                        }                    }                });            }        },0,2000);        //////////////////INTERNET CONNECTION////////////////////////////    }    @SuppressWarnings("StatementWithEmptyBody")    @Override    public boolean onNavigationItemSelected(MenuItem item)    {        dbHelper = new DBHelper(this);        fm = getSupportFragmentManager();        String pageTitle = "";        if(fm.getBackStackEntryCount() > 0)        {            pageTitle = fm.getBackStackEntryAt(fm.getBackStackEntryCount() - 1).getName();        }        int id = item.getItemId();        if(id == R.id.nav_ica_marksP)        {            if(!pageTitle.equals("ICA Marks"))            {                FragmentManager fm = getSupportFragmentManager();                for(int i = 1; i < fm.getBackStackEntryCount(); ++i) {                    fm.popBackStack();                }                FragmentTransaction ft = getSupportFragmentManager().beginTransaction();                ft.add(R.id.ParentHome, new ViewInternalMarksFragment(),"ICA Marks");                ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);                ft.addToBackStack("ICA Marks");                ft.commit();            }        }        if(id == R.id.nav_homeP)        {            if(!pageTitle.equals("NMIMS"))            {                FragmentManager fm = getSupportFragmentManager();                for(int i = 1; i < fm.getBackStackEntryCount(); ++i) {                    fm.popBackStack();                }                FragmentTransaction ft = getSupportFragmentManager().beginTransaction();                ft.add(R.id.ParentHome, new ParentHomeFragment(),"NMIMS");                ft.addToBackStack("NMIMS");                ft.commit();            }        }        if(id == R.id.nav_supportP)        {            if(!pageTitle.equals("Support"))            {                FragmentManager fm = getSupportFragmentManager();                for(int i = 1; i < fm.getBackStackEntryCount(); ++i) {                    fm.popBackStack();                }                FragmentTransaction ft = getSupportFragmentManager().beginTransaction();                ft.add(R.id.ParentHome, new SupportFragment(),"Support");                ft.addToBackStack("Support");                ft.commit();            }        }        else if (id == R.id.edit_profileP)        {            if(!pageTitle.equals("Change Password"))            {                FragmentManager fm = getSupportFragmentManager();                for(int i = 1; i < fm.getBackStackEntryCount(); ++i) {                    fm.popBackStack();                }                FragmentTransaction ft = getSupportFragmentManager().beginTransaction();                ft.add(R.id.ParentHome, new Faculty_ParentChangePasswordFragment());                ft.addToBackStack("Change Password");                ft.commit();            }        }        else if (id == R.id.nav_examTimeTableP)        {            if(!pageTitle.equals("Exam Timetable"))            {                FragmentManager fm = getSupportFragmentManager();                for(int i = 1; i < fm.getBackStackEntryCount(); ++i) {                    fm.popBackStack();                }                FragmentTransaction ft = getSupportFragmentManager().beginTransaction();                ft.add(R.id.ParentHome, new ExamTimeTableFragment(),"Exam Timetable");                ft.addToBackStack("Exam Timetable");                ft.commit();            }        }        else if (id == R.id.downloadsP)        {            if(!pageTitle.equals("Downloads"))            {                FragmentManager fm = getSupportFragmentManager();                for(int i = 1; i < fm.getBackStackEntryCount(); ++i) {                    fm.popBackStack();                }                FragmentTransaction ft = getSupportFragmentManager().beginTransaction();                ft.add(R.id.ParentHome, new DownloadFragment(),"Downloads");                ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);                ft.addToBackStack("Downloads");                ft.commit();            }        }        else if (id == R.id.nav_logoutP)        {            new MyLog(NMIMSApplication.getAppContext()).debug("sharedPrefschoolName",sharedPrefschoolName);            SQLiteDatabase db = dbHelper.getWritableDatabase();            String truncateTable = "DELETE FROM userData";            db.execSQL(truncateTable);            String truncateTableBE = "DELETE FROM backend_control";            db.execSQL(truncateTableBE);            dbHelper.deleteFromBackEndControl();            DBHelper dbHelper = new DBHelper(this);            dbHelper.deleteMyDate();            dbHelper.deleteMyNotification();            Intent intent=new Intent(ParentDrawer.this,LoginActivity.class);            startActivity(intent);            finish();        }        DrawerLayout drawer = findViewById(R.id.drawer_layout);        drawer.closeDrawer(GravityCompat.START);        return true;    }    @Override    public void onBackPressed() {        new MyLog(NMIMSApplication.getAppContext()).debug("Count",""+fm.getBackStackEntryCount());        Calendar calendar = Calendar.getInstance();        String currentDate  =  new SimpleDateFormat("dd-MM-yyyy", Locale.ENGLISH).format(calendar.getTime());        try        {            MyDate myDate = dbHelper.getMyDate(1);            if(myDate.getCurrentDate() != null || !TextUtils.isEmpty(myDate.getCurrentDate()))            {                dbHelper.deleteMyDate();                dbHelper.insertMyDate(new MyDate("1",currentDate,currentDate,currentDate));            }            else            {                dbHelper.insertMyDate(new MyDate("1",currentDate,currentDate,currentDate));            }        }        catch (Exception e)        {            new MyLog(NMIMSApplication.getAppContext()).debug("Insert Date Exception", e.getMessage());        }        if(fm.getBackStackEntryCount()>0)        {            if(fm.getBackStackEntryCount()==1)            {                allowExitCount++;                if(allowExitCount > 0 && allowExitCount < 2)                {                    new MyToast(ParentDrawer.this).showSmallCustomToast("Press back button again to exit");                }                if(allowExitCount > 1)                {                    finish();                }                Handler handler = new Handler();                handler.postDelayed(new Runnable() {                    @Override                    public void run()                    {                        allowExitCount = 0;                    }                },2000);            }            else            {                new MyLog(NMIMSApplication.getAppContext()).debug("PopBackStack","");                String title = fm.getBackStackEntryAt(fm.getBackStackEntryCount() - 2).getName();                new MyLog(NMIMSApplication.getAppContext()).debug("TITLE",title);                setActionBarTitle(title);                if(title.equals("NMIMS"))                {                    toggle.setDrawerIndicatorEnabled(true);                }                fm.popBackStack();            }        }        else        {            new MyLog(NMIMSApplication.getAppContext()).debug("PopBackStack","else");            super.onBackPressed();        }    }    public void setActionBarTitle(String title)    {        toolbarTitle.setText(title);        if(fm.getBackStackEntryCount()>1)        {            toggle.setDrawerIndicatorEnabled(true);        }    }    public boolean isConnectingToInternet(Context _context)    {        ConnectivityManager connectivity = (ConnectivityManager) _context.getSystemService(Context.CONNECTIVITY_SERVICE);        if (connectivity != null)        {            NetworkInfo[] info = connectivity.getAllNetworkInfo();            if (info != null)                for (int i = 0; i < info.length; i++)                    if (info[i].getState() == NetworkInfo.State.CONNECTED)                    {                        return true;                    }        }        return false;    }    public static void loadProfileData()    {        Cursor cursor = dbHelper.getUserDataValues();        if (cursor!= null){            if(cursor.moveToFirst()){                new MyLog(NMIMSApplication.getAppContext()).debug("sapid", cursor.getString(cursor.getColumnIndex("sapid")));                username = cursor.getString(cursor.getColumnIndex("sapid"));                sharedPrefschoolName = cursor.getString(cursor.getColumnIndex("currentSchool"));                //sharedPrefschoolName = Config.sharedPrefschoolName;                navHeaderEmail.setText(cursor.getString(cursor.getColumnIndex("emailId")).trim());                navHeaderName.setText(cursor.getString(cursor.getColumnIndex("firstName"))+" "+cursor.getString(cursor.getColumnIndex("lastName")).trim());            }        }    }    private void checkAppVersion()    {        try        {            currentVersion = BuildConfig.VERSION_NAME.replace(".","");            new MyLog(NMIMSApplication.getAppContext()).debug("currentVersion",currentVersion);            databaseReference.child("Update").child("Parent").addValueEventListener(new ValueEventListener() {                @Override                public void onDataChange(@NonNull DataSnapshot dataSnapshot)                {                    if(dataSnapshot.hasChildren())                    {                        forceUpdate="";                        newVersion="";                        new MyLog(NMIMSApplication.getAppContext()).debug("ChildrenCount",String.valueOf(dataSnapshot.getChildrenCount()));                        if(dataSnapshot.child("version").exists() && dataSnapshot.child("forceUpdate").exists())                        {                            newVersion = dataSnapshot.child("version").getValue().toString().replace(".","");                            new MyLog(NMIMSApplication.getAppContext()).debug("newVersion",newVersion);                            forceUpdate = dataSnapshot.child("forceUpdate").getValue().toString();                            new MyLog(NMIMSApplication.getAppContext()).debug("forceUpdate",forceUpdate);                        }                        if(Integer.parseInt(newVersion) > Integer.parseInt(currentVersion))                        {                            new MyLog(NMIMSApplication.getAppContext()).debug("New Version Available","YES");                        }                        else                        {                            new MyLog(NMIMSApplication.getAppContext()).debug("New Version Available","NO");                            showUpdate(forceUpdate);                        }                    }                }                @Override                public void onCancelled(@NonNull DatabaseError databaseError)                {                    databaseError.getMessage();                }            });        }        catch (Exception e)        {            e.printStackTrace();        }    }    private void showUpdate(String forceUpdate)    {        if(Integer.parseInt(newVersion) > Integer.parseInt(currentVersion))        {            new MyLog(NMIMSApplication.getAppContext()).debug("showUpdate","showUpdate");            AlertDialog.Builder builder = new AlertDialog.Builder(this);            builder.setTitle("New Version Available");            builder.setMessage("Install new version of NMIMS");            builder.setCancelable(false);            if(forceUpdate.equals("Y"))            {                builder.setPositiveButton(                        "Update",                        new DialogInterface.OnClickListener() {                            public void onClick(DialogInterface dialog, int id)                            {                                final String appPackageName = getPackageName(); // getPackageName() from Context or Activity object                                new MyLog(NMIMSApplication.getAppContext()).debug("appPackageName",appPackageName);                                try                                {                                    startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=" +"com.nmims.app")));                                }                                catch (android.content.ActivityNotFoundException anfe)                                {                                    startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=" + "com.nmims.app")));                                }                            }                        });            }            else            {                builder.setPositiveButton(                        "Update Now",                        new DialogInterface.OnClickListener() {                            public void onClick(DialogInterface dialog, int id)                            {                                final String appPackageName = getPackageName(); // getPackageName() from Context or Activity object                                new MyLog(NMIMSApplication.getAppContext()).debug("appPackageName",appPackageName);                                try                                {                                    startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=" + "com.nmims.app")));                                }                                catch (android.content.ActivityNotFoundException anfe)                                {                                    startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=" + "com.nmims.app")));                                }                            }                        });                builder.setNegativeButton(                        "Update Later",                        new DialogInterface.OnClickListener() {                            public void onClick(DialogInterface dialog, int id)                            {                                dialog.cancel();                            }                        });            }            AlertDialog alert = builder.create();            alert.show();        }    }    @Override    public void onResume(){        super.onResume();        if(forceUpdate.equals("Y"))        {            showUpdate("Y");        }    }    public boolean isStoragePermissionGranted()    {        try        {            dbHelper.deleteMyPermission();            if (ActivityCompat.checkSelfPermission(ParentDrawer.this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)            {                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)                {                    requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUEST_PERMISSIONS_CODE_WRITE_STORAGE);                }            }            else            {                dbHelper.insertMyPermission(new MyPermission("1", Config.StoragePermission,"Y"));                isStoragePermission = true;            }        }        catch (Exception e)        {            e.printStackTrace();        }        return isStoragePermission;    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults)    {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        if (requestCode == REQUEST_PERMISSIONS_CODE_WRITE_STORAGE) {            if (permissions[0].equals(Manifest.permission.WRITE_EXTERNAL_STORAGE)                    && grantResults[0] == PackageManager.PERMISSION_GRANTED)            {                new MyLog(NMIMSApplication.getAppContext()).debug("Permission[0]",permissions[0]);                new MyToast(ParentDrawer.this).showSmallCustomToast("Permission Granted");                dbHelper.deleteMyPermission();                dbHelper.insertMyPermission(new MyPermission("1", Config.StoragePermission,"Y"));                isStoragePermission = true;            }            else            {                boolean showRationale = false;                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M)                {                    showRationale = shouldShowRequestPermissionRationale( Manifest.permission.WRITE_EXTERNAL_STORAGE );                    if(!showRationale)                    {                        dbHelper.deleteMyPermission();                        dbHelper.insertMyPermission(new MyPermission("1", Config.StoragePermission,"N"));                    }                }            }        }    }    private void navigationDrawerTextColorChange()    {        SpannableString s;        ///////////////////////////        MenuItem nav_homeP = menu.findItem(R.id.nav_homeP);        s = new SpannableString(nav_homeP.getTitle());        s.setSpan(new TextAppearanceSpan(this, R.style.TextAppearanceRed), 0, s.length(), 0);        nav_homeP.setTitle(s);        navigationView.setNavigationItemSelectedListener(this);        //////////////////////////        ///////////////////////////        MenuItem nav_ica_marksP = menu.findItem(R.id.nav_ica_marksP);        s = new SpannableString(nav_ica_marksP.getTitle());        s.setSpan(new TextAppearanceSpan(this, R.style.TextAppearanceRed), 0, s.length(), 0);        nav_ica_marksP.setTitle(s);        navigationView.setNavigationItemSelectedListener(this);        //////////////////////////        ///////////////////////////        MenuItem nav_supportP = menu.findItem(R.id.nav_supportP);        s = new SpannableString(nav_supportP.getTitle());        s.setSpan(new TextAppearanceSpan(this, R.style.TextAppearanceRed), 0, s.length(), 0);        nav_supportP.setTitle(s);        navigationView.setNavigationItemSelectedListener(this);        //////////////////////////        ///////////////////////////        MenuItem downloadsP = menu.findItem(R.id.downloadsP);        s = new SpannableString(downloadsP.getTitle());        s.setSpan(new TextAppearanceSpan(this, R.style.TextAppearanceRed), 0, s.length(), 0);        downloadsP.setTitle(s);        navigationView.setNavigationItemSelectedListener(this);        //////////////////////////        ///////////////////////////        MenuItem edit_profileP = menu.findItem(R.id.edit_profileP);        s = new SpannableString(edit_profileP.getTitle());        s.setSpan(new TextAppearanceSpan(this, R.style.TextAppearanceRed), 0, s.length(), 0);        edit_profileP.setTitle(s);        navigationView.setNavigationItemSelectedListener(this);        //////////////////////////        ///////////////////////////        MenuItem nav_examTimeTableP = menu.findItem(R.id.nav_examTimeTableP);        s = new SpannableString(nav_examTimeTableP.getTitle());        s.setSpan(new TextAppearanceSpan(this, R.style.TextAppearanceRed), 0, s.length(), 0);        nav_examTimeTableP.setTitle(s);        navigationView.setNavigationItemSelectedListener(this);        //////////////////////////        ///////////////////////////        MenuItem nav_logoutP = menu.findItem(R.id.nav_logoutP);        s = new SpannableString(nav_logoutP.getTitle());        s.setSpan(new TextAppearanceSpan(this, R.style.TextAppearanceRed), 0, s.length(), 0);        nav_logoutP.setTitle(s);        navigationView.setNavigationItemSelectedListener(this);        //////////////////////////    }}