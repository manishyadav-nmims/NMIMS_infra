package com.nmims.app.Fragments.Academic;import android.Manifest;import android.app.Activity;import android.app.AlertDialog;import android.app.DownloadManager;import android.app.ProgressDialog;import android.content.DialogInterface;import android.content.Intent;import android.content.pm.PackageManager;import android.database.Cursor;import android.net.Uri;import android.os.Bundle;import android.os.Environment;import android.provider.OpenableColumns;import android.provider.Settings;import android.text.Html;import android.text.TextUtils;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import androidx.annotation.NonNull;import androidx.core.app.ActivityCompat;import androidx.fragment.app.Fragment;import androidx.fragment.app.FragmentTransaction;import com.android.volley.AuthFailureError;import com.android.volley.DefaultRetryPolicy;import com.android.volley.NetworkResponse;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.toolbox.Volley;import com.google.firebase.analytics.FirebaseAnalytics;import com.google.gson.Gson;import com.nmims.app.Activities.StudentDrawer;import com.nmims.app.Helpers.AESEncryption;import com.nmims.app.Helpers.Config;import com.nmims.app.Helpers.DBHelper;import com.nmims.app.Helpers.DatePickerFragmentWithMinDate;import com.nmims.app.Helpers.MyLog;import com.nmims.app.Helpers.MyToast;import com.nmims.app.Helpers.NMIMSApplication;import com.nmims.app.Helpers.SnackBarUtils;import com.nmims.app.Helpers.VolleyMultipartRequest;import com.nmims.app.Models.MyPermission;import com.nmims.app.Models.StudentAssignmentDataModel;import com.nmims.app.R;import org.json.JSONException;import org.json.JSONObject;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.HashMap;import java.util.Locale;import java.util.Map;import static android.content.Context.DOWNLOAD_SERVICE;public class StudentAssignmentDetailsFragment extends Fragment{    private TextView courseValue, nameValue, endDateValue, statusValue, marksValue, assignmentDetailsValue, selectAssignmentUploadFileTitle, previousUploadFileTitle, uploadAnswerFilePath, assignmentQuestionFileTitle;    private LinearLayout assignmentQuestionFileDC, previousUploadFileDC, uploadAnswerFileDC;    private Button submitAssignmentBtn;    private StudentAssignmentDataModel studentAssignmentDataModel;    private String assignmentId ="", assignmentStatus="", displayName, username="",sharedPrefschoolName="",            questionId = null, answerId = null, questionLink = null, answerLink = null, currentDate = null,            endDateConv = null, endDate = null, isGroupSubmitAllowed = null, isLateSubmissionAllowed = null,            studentUploadedFilePath = null, filePath = null, questionFilePath = null, answerFilePath = null;    private RelativeLayout studAssignDetailsFrag;    private ProgressDialog progressDialog;    private Exception e = null;    private int REQUEST_PERMISSIONS_CODE_WRITE_STORAGE = 6;    private DBHelper dbHelper;    private String status = null, myApiUrlLms="";    private RequestQueue requestQueue;    private ArrayList<HashMap<String, String>> arraylist;    private Uri fileUri;    private boolean isFileSubmissionAllowed = false;    private String assignmentError = "", assignmentNote = "", assignmentSuccess ="", assignmentCompleted="", token="",            assignmentStatusResponse="";    private AESEncryption aes;    @Override    public View onCreateView(LayoutInflater inflater,  ViewGroup container,  Bundle savedInstanceState)    {        View view = inflater.inflate(R.layout.fragment_student_assignment_details, container, false);        courseValue = view.findViewById(R.id.courseValue);        nameValue = view.findViewById(R.id.nameValue);        endDateValue = view.findViewById(R.id.endDateValue);        statusValue = view.findViewById(R.id.statusValue);        marksValue = view.findViewById(R.id.marksValue);        assignmentDetailsValue = view.findViewById(R.id.assignmentDetailsValue);        assignmentQuestionFileDC = view.findViewById(R.id.assignmentQuestionFileDC);        previousUploadFileDC = view.findViewById(R.id.previousUploadFileDC);        uploadAnswerFileDC = view.findViewById(R.id.uploadAnswerFileDC);        studAssignDetailsFrag = view.findViewById(R.id.studAssignDetailsFrag);        submitAssignmentBtn = view.findViewById(R.id.submitAssignmentBtn);        selectAssignmentUploadFileTitle = view.findViewById(R.id.selectAssignmentUploadFileTitle);        previousUploadFileTitle = view.findViewById(R.id.previousUploadFileTitle);        uploadAnswerFilePath = view.findViewById(R.id.uploadAnswerFilePath);        assignmentQuestionFileTitle = view.findViewById(R.id.assignmentQuestionFileTitle);        ((StudentDrawer)getActivity()).showAnnouncements(false);        ((StudentDrawer)getActivity()).setActionBarTitle("Assignment");        dbHelper = new DBHelper(getContext());        myApiUrlLms = dbHelper.getBackEndControl("myApiUrlLms").getValue();        aes = new AESEncryption(getContext());        //myApiUrlLms = Config.myApiUrlLms;        Cursor cursor = dbHelper.getUserDataValues();        if (cursor!= null)        {            if(cursor.moveToFirst())            {                username = cursor.getString(cursor.getColumnIndex("sapid"));                new MyLog(NMIMSApplication.getAppContext()).debug("username", username);                sharedPrefschoolName = cursor.getString(cursor.getColumnIndex("currentSchool"));					   //sharedPrefschoolName = Config.sharedPrefschoolName;                new MyLog(NMIMSApplication.getAppContext()).debug("sharedPrefschoolName1", sharedPrefschoolName);                token = cursor.getString(cursor.getColumnIndex("token"));            }        }        loadPageContent();        //////////ADDING FIREBASE EVENTS///////////////        FirebaseAnalytics mFirebaseAnalytics = FirebaseAnalytics.getInstance(getContext());        Bundle params = new Bundle();        params.putString("stud_assignment_details_fragment", "stud_assignment_details_fragment");        mFirebaseAnalytics.logEvent("Stud_Assignment_Details_Fragment", params);        ///////////////////////////////////////////////        return view;    }    private void loadPageContent()    {        Bundle bundle = this.getArguments();        studentAssignmentDataModel = bundle.getParcelable("assignmentData");        endDate = studentAssignmentDataModel.getAssignmentEndDate();        assignmentStatus = studentAssignmentDataModel.getAssignmentStatus();        new MyLog(NMIMSApplication.getAppContext()).debug("assignmentStatus",assignmentStatus);        assignmentId = studentAssignmentDataModel.getAssignmentId();        new MyLog(NMIMSApplication.getAppContext()).debug("assignmentId",assignmentId);        if(!endDate.equalsIgnoreCase("NA"))        {            endDateConv = endDate.substring(8,10)+"-"+endDate.substring(5,7)+"-"+endDate.substring(0,4);        }        else        {            endDateConv = "NA";        }        new MyLog(NMIMSApplication.getAppContext()).debug("endDate",endDate);        new MyLog(NMIMSApplication.getAppContext()).debug("endDateConv",endDateConv);        questionId = studentAssignmentDataModel.getAssignmentId(); // for question file        new MyLog(NMIMSApplication.getAppContext()).debug("questionId",questionId);        answerId =  studentAssignmentDataModel.getStudentAssignmentId();  //for Answer file        new MyLog(NMIMSApplication.getAppContext()).debug("answerId",answerId);        questionLink = myApiUrlLms + sharedPrefschoolName+"/downloadFileForApp?id="+ aes.encrypt(questionId).replace("\n", "").replace("\\","").trim()+"&username="+aes.encrypt(username).replace("\n", "").replace("\\","").trim();        new MyLog(NMIMSApplication.getAppContext()).debug("questionLink",questionLink);        answerLink =  myApiUrlLms + sharedPrefschoolName+"/downloadFileForApp?saId="+ aes.encrypt(answerId).replace("\n", "").replace("\\","").trim()+"&username="+aes.encrypt(username).replace("\n", "").replace("\\","").trim();        new MyLog(NMIMSApplication.getAppContext()).debug("answerLink",answerLink);        questionFilePath = studentAssignmentDataModel.getAssignmentFile();        if(!TextUtils.isEmpty(questionFilePath))        {            assignmentQuestionFileDC.setVisibility(View.VISIBLE);            assignmentQuestionFileTitle.setVisibility(View.VISIBLE);        }        else        {            assignmentQuestionFileDC.setVisibility(View.GONE);            assignmentQuestionFileTitle.setVisibility(View.GONE);        }        studAssignDetailsFrag.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                // Dont Delete            }        });        assignmentQuestionFileDC.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v)            {                if (ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)                {                    dbHelper = new DBHelper(getContext());                    status = dbHelper.getMyPermission(1).getPermissionStatus();                    if(!TextUtils.isEmpty(status) && status.equals("Y"))                    {                        new MyLog(NMIMSApplication.getAppContext()).debug("StoragePermStatus", status);                        downloadQuestionFile();                    }                    else if(!TextUtils.isEmpty(status) && status.equals("N"))                    {                        new MyLog(NMIMSApplication.getAppContext()).debug("StoragePermStatus", status);                        //user has checked dont ask again                        storagePermissionPopUp();                    }                    else                    {                        if (ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)                        {                            requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUEST_PERMISSIONS_CODE_WRITE_STORAGE);                        }                    }                }                else                {                    downloadQuestionFile();                }            }        });        new MyLog(NMIMSApplication.getAppContext()).debug("questionFilePath",questionFilePath);        studentUploadedFilePath = studentAssignmentDataModel.getStudentFilePath();        new MyLog(NMIMSApplication.getAppContext()).debug("studentUploadedFilePath",studentUploadedFilePath);        if(!TextUtils.isEmpty(studentUploadedFilePath))        {            previousUploadFileTitle.setVisibility(View.VISIBLE);            previousUploadFileDC.setVisibility(View.VISIBLE);        }        else        {            previousUploadFileTitle.setVisibility(View.GONE);            previousUploadFileDC.setVisibility(View.GONE);        }        previousUploadFileDC.setOnClickListener(new View.OnClickListener()        {            @Override            public void onClick(View v)            {                if (ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)                {                    dbHelper = new DBHelper(getContext());                    status = dbHelper.getMyPermission(1).getPermissionStatus();                    if(!TextUtils.isEmpty(status) && status.equals("Y"))                    {                        new MyLog(NMIMSApplication.getAppContext()).debug("StoragePermStatus", status);                        downloadAnswerFile();                    }                    else if(!TextUtils.isEmpty(status) && status.equals("N"))                    {                        new MyLog(NMIMSApplication.getAppContext()).debug("StoragePermStatus", status);                        storagePermissionPopUp();                    }                    else                    {                        if (ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)                        {                            requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUEST_PERMISSIONS_CODE_WRITE_STORAGE);                        }                    }                }                else                {                    downloadAnswerFile();                }            }        });        new MyLog(NMIMSApplication.getAppContext()).debug("studentUploadedFilePath",studentUploadedFilePath);        Calendar calendar = Calendar.getInstance();        currentDate  =  new SimpleDateFormat("dd-MM-yyyy", Locale.ENGLISH).format(calendar.getTime());        new MyLog(NMIMSApplication.getAppContext()).debug("currentDate",currentDate);        int diff = DatePickerFragmentWithMinDate.getCountOfDays(currentDate, endDateConv);        new MyLog(NMIMSApplication.getAppContext()).debug("diff",String.valueOf(diff));        isLateSubmissionAllowed = studentAssignmentDataModel.getAllowAfterEndDate();        isGroupSubmitAllowed = studentAssignmentDataModel.getIsSubmitterInGroup();        if(!TextUtils.isEmpty(isLateSubmissionAllowed) && isLateSubmissionAllowed != null)        {            new MyLog(NMIMSApplication.getAppContext()).debug("isLateSubmissionAllowed",isLateSubmissionAllowed);        }        else        {            new MyLog(NMIMSApplication.getAppContext()).debug("isLateSubmissionAllowed","null");        }        if(!TextUtils.isEmpty(isGroupSubmitAllowed) && isGroupSubmitAllowed != null)        {            new MyLog(NMIMSApplication.getAppContext()).debug("isGroupSubmitAllowed",isGroupSubmitAllowed);        }        else        {            new MyLog(NMIMSApplication.getAppContext()).debug("isGroupSubmitAllowed","null");        }        selectAssignmentUploadFileTitle.setVisibility(View.VISIBLE);        uploadAnswerFileDC.setVisibility(View.VISIBLE);        submitAssignmentBtn.setVisibility(View.VISIBLE);        uploadAnswerFilePath.setVisibility(View.VISIBLE);        if(isGroupSubmitAllowed == null || TextUtils.isEmpty(isGroupSubmitAllowed))        {            selectAssignmentUploadFileTitle.setVisibility(View.VISIBLE);            uploadAnswerFileDC.setVisibility(View.VISIBLE);            submitAssignmentBtn.setVisibility(View.VISIBLE);            uploadAnswerFilePath.setVisibility(View.VISIBLE);        }        else        {            if(isGroupSubmitAllowed.equals("Y"))            {                selectAssignmentUploadFileTitle.setVisibility(View.VISIBLE);                uploadAnswerFileDC.setVisibility(View.VISIBLE);                submitAssignmentBtn.setVisibility(View.VISIBLE);                uploadAnswerFilePath.setVisibility(View.VISIBLE);            }            else            {                selectAssignmentUploadFileTitle.setVisibility(View.GONE);                uploadAnswerFileDC.setVisibility(View.GONE);                submitAssignmentBtn.setVisibility(View.GONE);                uploadAnswerFilePath.setVisibility(View.GONE);            }        }       /* if(diff > 0 || isLateSubmissionAllowed.equals("Y"))        {            if(isGroupSubmitAllowed == null || TextUtils.isEmpty(isGroupSubmitAllowed))            {                selectAssignmentUploadFileTitle.setVisibility(View.VISIBLE);                uploadAnswerFileDC.setVisibility(View.VISIBLE);                submitAssignmentBtn.setVisibility(View.VISIBLE);                uploadAnswerFilePath.setVisibility(View.VISIBLE);            }            else            {                if(isGroupSubmitAllowed.equals("Y"))                {                    selectAssignmentUploadFileTitle.setVisibility(View.VISIBLE);                    uploadAnswerFileDC.setVisibility(View.VISIBLE);                    submitAssignmentBtn.setVisibility(View.VISIBLE);                    uploadAnswerFilePath.setVisibility(View.VISIBLE);                }                else                {                    selectAssignmentUploadFileTitle.setVisibility(View.GONE);                    uploadAnswerFileDC.setVisibility(View.GONE);                    submitAssignmentBtn.setVisibility(View.GONE);                    uploadAnswerFilePath.setVisibility(View.GONE);                }            }        }        else        {            selectAssignmentUploadFileTitle.setVisibility(View.GONE);            uploadAnswerFileDC.setVisibility(View.GONE);            submitAssignmentBtn.setVisibility(View.GONE);            uploadAnswerFilePath.setVisibility(View.GONE);        }*/        courseValue.setText(studentAssignmentDataModel.getAssignmentCourse());        nameValue.setText(studentAssignmentDataModel.getAssignmentName());        String trimmedDate = studentAssignmentDataModel.getAssignmentEndDate().substring(0, 11);        new MyLog(NMIMSApplication.getAppContext()).debug("trimmedDate",trimmedDate);        endDateValue.setText(trimmedDate);        if (studentAssignmentDataModel.getAssignmentStatus().toLowerCase().startsWith("complete"))        {            statusValue.setText("Completed");        }        else if (studentAssignmentDataModel.getAssignmentStatus().toLowerCase().startsWith("pending"))        {            statusValue.setText("Pending");        }        else        {            statusValue.setText("Submitted");        }        marksValue.setText(studentAssignmentDataModel.getMarksOutOf());        assignmentDetailsValue.setText(Html.fromHtml(studentAssignmentDataModel.getAssignmentText()));        uploadAnswerFileDC.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v)            {                dbHelper = new DBHelper(getContext());                status = dbHelper.getMyPermission(1).getPermissionStatus();                if (ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)                {                    if(!TextUtils.isEmpty(status) && status.equals("Y"))                    {                        new MyLog(NMIMSApplication.getAppContext()).debug("StoragePermStatus", status);                        showFileChooser();                    }                    else if(!TextUtils.isEmpty(status) && status.equals("N"))                    {                        new MyLog(NMIMSApplication.getAppContext()).debug("StoragePermStatus", status);                        storagePermissionPopUp();                    }                    else                    {                        if (ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)                        {                            requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUEST_PERMISSIONS_CODE_WRITE_STORAGE);                        }                    }                }                else                {                    showFileChooser();                }            }        });        submitAssignmentBtn.setOnClickListener(new View.OnClickListener()        {            @Override            public void onClick(View v) {                if(displayName != null)                {                    if(fileValidator(displayName)){                        if(isGroupSubmitAllowed != null && !TextUtils.isEmpty(isGroupSubmitAllowed) && isGroupSubmitAllowed.equals("Y"))                        {                            if(isFileSubmissionAllowed)                            {                                if(assignmentStatus.toLowerCase().equals("completed"))                                {                                    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getContext());                                    alertDialogBuilder.setTitle("Note");                                    alertDialogBuilder.setCancelable(false);                                    alertDialogBuilder.setMessage("This assignment is already submitted by you and has already been evaluated by faculty. So, you cannot resubmit it.");                                    alertDialogBuilder.setPositiveButton("Got it", new DialogInterface.OnClickListener() {                                        public void onClick(DialogInterface dialog, int id)                                        {                                            dialog.dismiss();                                        }                                    });                                    alertDialogBuilder.show();                                }                                else if (assignmentStatus.toLowerCase().equals("completed___evaluated___rejected"))                                {                                    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getContext());                                    alertDialogBuilder.setTitle("Note");                                    alertDialogBuilder.setCancelable(false);                                    alertDialogBuilder.setMessage("This assignment is already submitted by you and already has been evaluated and also rejected by faculty. So, you cannot resubmit it.");                                    alertDialogBuilder.setPositiveButton("Got it", new DialogInterface.OnClickListener() {                                        public void onClick(DialogInterface dialog, int id)                                        {                                            dialog.dismiss();                                        }                                    });                                    alertDialogBuilder.show();                                }                                else if (assignmentStatus.toLowerCase().equals("completed___not evaluated___rejected"))                                {                                    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getContext());                                    alertDialogBuilder.setTitle("Note");                                    alertDialogBuilder.setCancelable(false);                                    alertDialogBuilder.setMessage("This assignment is already submitted by you and has not been evaluated but rejected by faculty. So, you cannot resubmit it.");                                    alertDialogBuilder.setPositiveButton("Got it", new DialogInterface.OnClickListener() {                                        public void onClick(DialogInterface dialog, int id)                                        {                                            dialog.dismiss();                                        }                                    });                                    alertDialogBuilder.show();                                }                                else if (assignmentStatus.toLowerCase().equals("completed___evaluated___approved"))                                {                                    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getContext());                                    alertDialogBuilder.setTitle("Note");                                    alertDialogBuilder.setCancelable(false);                                    alertDialogBuilder.setMessage("This assignment is already submitted by you and already has been evaluated and also approved by faculty. So, you cannot resubmit it.");                                    alertDialogBuilder.setPositiveButton("Got it", new DialogInterface.OnClickListener() {                                        public void onClick(DialogInterface dialog, int id)                                        {                                            dialog.dismiss();                                        }                                    });                                    alertDialogBuilder.show();                                }                                else if (assignmentStatus.toLowerCase().equals("completed___not evaluated___approved")) {                                    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getContext());                                    alertDialogBuilder.setTitle("Note");                                    alertDialogBuilder.setCancelable(false);                                    alertDialogBuilder.setMessage("This assignment is already submitted by you and has not been evaluated but approved by faculty. So, you cannot resubmit it.");                                    alertDialogBuilder.setPositiveButton("Got it", new DialogInterface.OnClickListener() {                                        public void onClick(DialogInterface dialog, int id) {                                            dialog.dismiss();                                        }                                    });                                    alertDialogBuilder.show();                                }                                else                                {                                    uploadAssignmentFile(displayName,fileUri);                                }                            }                            else                            {                                View view = getActivity().findViewById(android.R.id.content);                                SnackBarUtils.setSnackBar(view, "Selected File is not zip file... Please select another file");                            }                        }                        else                        {                            if(assignmentStatus.toLowerCase().equals("completed"))                            {                                AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getContext());                                alertDialogBuilder.setTitle("Note");                                alertDialogBuilder.setCancelable(false);                                alertDialogBuilder.setMessage("This assignment is already submitted by you and has already been evaluated by faculty. So, you cannot resubmit it.");                                alertDialogBuilder.setPositiveButton("Got it", new DialogInterface.OnClickListener() {                                    public void onClick(DialogInterface dialog, int id)                                    {                                        dialog.dismiss();                                    }                                });                                alertDialogBuilder.show();                            }                            else if (assignmentStatus.toLowerCase().equals("completed___evaluated___rejected"))                            {                                AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getContext());                                alertDialogBuilder.setTitle("Note");                                alertDialogBuilder.setCancelable(false);                                alertDialogBuilder.setMessage("This assignment is already submitted by you and already has been evaluated and also rejected by faculty. So, you cannot resubmit it.");                                alertDialogBuilder.setPositiveButton("Got it", new DialogInterface.OnClickListener() {                                    public void onClick(DialogInterface dialog, int id)                                    {                                        dialog.dismiss();                                    }                                });                                alertDialogBuilder.show();                            }                            else if (assignmentStatus.toLowerCase().equals("completed___not evaluated___rejected"))                            {                                AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getContext());                                alertDialogBuilder.setTitle("Note");                                alertDialogBuilder.setCancelable(false);                                alertDialogBuilder.setMessage("This assignment is already submitted by you and has not been evaluated but rejected by faculty. So, you cannot resubmit it.");                                alertDialogBuilder.setPositiveButton("Got it", new DialogInterface.OnClickListener() {                                    public void onClick(DialogInterface dialog, int id)                                    {                                        dialog.dismiss();                                    }                                });                                alertDialogBuilder.show();                            }                            else if (assignmentStatus.toLowerCase().equals("completed___evaluated___approved"))                            {                                AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getContext());                                alertDialogBuilder.setTitle("Note");                                alertDialogBuilder.setCancelable(false);                                alertDialogBuilder.setMessage("This assignment is already submitted by you and already has been evaluated and also approved by faculty. So, you cannot resubmit it.");                                alertDialogBuilder.setPositiveButton("Got it", new DialogInterface.OnClickListener() {                                    public void onClick(DialogInterface dialog, int id)                                    {                                        dialog.dismiss();                                    }                                });                                alertDialogBuilder.show();                            }                            else if (assignmentStatus.toLowerCase().equals("completed___not evaluated___approved")) {                                AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getContext());                                alertDialogBuilder.setTitle("Note");                                alertDialogBuilder.setCancelable(false);                                alertDialogBuilder.setMessage("This assignment is already submitted by you and has not been evaluated but approved by faculty. So, you cannot resubmit it.");                                alertDialogBuilder.setPositiveButton("Got it", new DialogInterface.OnClickListener() {                                    public void onClick(DialogInterface dialog, int id) {                                        dialog.dismiss();                                    }                                });                                alertDialogBuilder.show();                            }                            else                            {                                uploadAssignmentFile(displayName,fileUri);                            }                        }                    }else{                        View view = getActivity().findViewById(android.R.id.content);                        SnackBarUtils.setSnackBar(view,"It seems your file is malicious...Kindly choose proper file");                    }                }                else                {                    View view = getActivity().findViewById(android.R.id.content);                    SnackBarUtils.setSnackBar(view,"Please select assignment file to proceed...");                }            }        });    }    private void showFileChooser()    {        Intent intent = new Intent();        intent.setAction(Intent.ACTION_GET_CONTENT);        intent.setType("*/*");        startActivityForResult(intent,1);    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults)    {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        if (requestCode == REQUEST_PERMISSIONS_CODE_WRITE_STORAGE)        {            if (permissions[0].equals(Manifest.permission.WRITE_EXTERNAL_STORAGE) && grantResults[0] == PackageManager.PERMISSION_GRANTED)            {                new MyLog(NMIMSApplication.getAppContext()).debug("Permission[0]",permissions[0]);                new MyToast(getContext()).showSmallCustomToast("Permission Granted");                dbHelper.deleteMyPermission();                dbHelper.insertMyPermission(new MyPermission("1", Config.StoragePermission,"Y"));            }            else            {                boolean showRationale = false;                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M)                {                    showRationale = shouldShowRequestPermissionRationale( Manifest.permission.WRITE_EXTERNAL_STORAGE );                    if(!showRationale)                    {                        dbHelper.deleteMyPermission();                        dbHelper.insertMyPermission(new MyPermission("1", Config.StoragePermission,"N"));                    }                }            }        }    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data)    {        if (resultCode == Activity.RESULT_OK)        {            fileUri = data.getData();            String uriString = fileUri.toString();            File myFile = new File(uriString);            String path = myFile.getAbsolutePath();            displayName = null;            new MyLog(NMIMSApplication.getAppContext()).debug("uriString",uriString);            if (uriString.startsWith("content://"))            {                Cursor cursor = null;                try                {                    cursor = getContext().getContentResolver().query(fileUri, null, null, null, null);                    if (cursor != null && cursor.moveToFirst())                    {                        displayName = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));                        if(isGroupSubmitAllowed != null && !TextUtils.isEmpty(isGroupSubmitAllowed) && isGroupSubmitAllowed.equals("Y"))                        {                            String extension = getFileExtension(displayName);                            new MyLog(NMIMSApplication.getAppContext()).debug("extension",extension);                            if(extension.contains("zip") || extension.equalsIgnoreCase(".zip") && !extension.equals(""))                            {                                isFileSubmissionAllowed = true;                                new MyLog(NMIMSApplication.getAppContext()).debug("nameeeee>>>>  ",displayName);                                uploadAnswerFilePath.setText(displayName);                            }                            else                            {                                isFileSubmissionAllowed = false;                                new MyLog(NMIMSApplication.getAppContext()).debug("nameeeee>>>>  ",displayName);                                uploadAnswerFilePath.setText("Selected File is not zip file... Please select another file");                            }                        }                        else                        {                            new MyLog(NMIMSApplication.getAppContext()).debug("nameeeee>>>>  ",displayName);                            uploadAnswerFilePath.setText(displayName);                        }                    }                }                finally                {                    cursor.close();                }            }            else if (uriString.startsWith("file://"))            {                displayName = myFile.getName();                new MyLog(NMIMSApplication.getAppContext()).debug("nameeeee>>>>  ",displayName);                uploadAnswerFilePath.setText(displayName);            }        }        super.onActivityResult(requestCode, resultCode, data);    }    private void storagePermissionPopUp()    {        AlertDialog.Builder builder1 = new AlertDialog.Builder(getContext());        builder1.setTitle("Allow Storage Permission ?");        builder1.setMessage("You need to give permission from SETTINGS to download/upload questions or answer file. " +                "Press YES to open SETTINGS...");        builder1.setCancelable(true);        builder1.setPositiveButton(                "Yes",                new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int id)                    {                        Intent intent = new Intent();                        intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);                        Uri uri = Uri.fromParts("package", getActivity().getPackageName(), "StudentAssignmentDetailsFragment");                        intent.setData(uri);                        startActivity(intent);                    }                });        builder1.setNegativeButton(                "No",                new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int id) {                        dialog.cancel();                    }                });        AlertDialog alert11 = builder1.create();        alert11.show();    }    private void downloadQuestionFile()    {        try        {            String extension = null;            long output;            DownloadManager downloadManager = (DownloadManager) getActivity().getSystemService(DOWNLOAD_SERVICE);            DownloadManager.Request request = new DownloadManager.Request(Uri.parse(questionLink));            request.addRequestHeader("token", token);//		    request.addRequestHeader("username", username);            new MyLog(getContext()).debug("downLoadToken",token);            if(questionFilePath.contains("."))            {                extension = questionFilePath.substring(questionFilePath.lastIndexOf("."));            }            new MyLog(NMIMSApplication.getAppContext()).debug("extension",extension);            request.setTitle("Attachments");            request.setDescription(studentAssignmentDataModel.getAssignmentName());            if(questionFilePath.contains(","))            {                request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, Config.Announcements_Attachments_Path+studentAssignmentDataModel.getAssignmentName()+".zip");            }            else            {                request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, Config.Announcements_Attachments_Path+studentAssignmentDataModel.getAssignmentName()+extension);            }            output = downloadManager.enqueue(request);            request.setShowRunningNotification(true);            request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);            new MyToast(getContext()).showSmallCustomToast("File Downloaded");        }        catch (Exception e)        {            new MyLog(NMIMSApplication.getAppContext()).debug("Question Download Error", e.getMessage());        }    }    private void downloadAnswerFile()    {        try        {            String extension = null;            long output;            DownloadManager downloadManager = (DownloadManager) getActivity().getSystemService(DOWNLOAD_SERVICE);            DownloadManager.Request request = new DownloadManager.Request(Uri.parse(answerLink));            request.addRequestHeader("token", token);//		    request.addRequestHeader("username", username);            new MyLog(NMIMSApplication.getAppContext()).debug("Answerlink", answerLink);            answerFilePath = studentAssignmentDataModel.getStudentFilePath();            new MyLog(NMIMSApplication.getAppContext()).debug("answerFilePath", answerFilePath);            if(answerFilePath.contains("."))            {                extension = answerFilePath.substring(answerFilePath.lastIndexOf("."));            }            new MyLog(NMIMSApplication.getAppContext()).debug("extension",extension);            request.setTitle("Attachemnts");            request.setDescription(studentAssignmentDataModel.getAssignmentName());            request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, Config.Announcements_Attachments_Path+"ans_"+studentAssignmentDataModel.getAssignmentName()+extension);            output = downloadManager.enqueue(request);            request.setShowRunningNotification(true);            request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);            new MyToast(getContext()).showSmallCustomToast("File Downloaded");        }        catch (Exception e)        {            e.printStackTrace();            new MyLog(NMIMSApplication.getAppContext()).debug("Answer Download Error", e.getMessage());        }    }    private void uploadAssignmentFile(final String fileName, Uri uriFile)    {        progressDialog = ProgressDialog.show(getActivity(),"Uploading Assignment","Please Wait...",true);        String requestURL = "";        if(isGroupSubmitAllowed.equals("Y"))        {            requestURL = myApiUrlLms+sharedPrefschoolName+"/submitAssignmentByOneInGroupForApp";        }        else        {            requestURL = myApiUrlLms + sharedPrefschoolName+"/submitAssignmentForApp";        }        new MyLog(NMIMSApplication.getAppContext()).debug("requestURL",requestURL);        InputStream iStream = null;        try        {            requestQueue = Volley.newRequestQueue(getContext().getApplicationContext());            iStream = getContext().getContentResolver().openInputStream(uriFile);            final byte[] inputData = getBytes(iStream);            VolleyMultipartRequest volleyMultipartRequest = new VolleyMultipartRequest(Request.Method.POST, requestURL,                    new Response.Listener<NetworkResponse>() {                        @Override                        public void onResponse(NetworkResponse response) {                            String respStr = aes.decrypt(new String(response.data));                            new MyLog(NMIMSApplication.getAppContext()).debug("ressssssoo",respStr);                            if(respStr.contains("unauthorised access"))                            {                                progressDialog.dismiss();                                ((StudentDrawer)getActivity()).unauthorizedAccessFound();                                return;                            }                            try                            {                                JSONObject jsonObject = new JSONObject(respStr);                                jsonObject.toString().replace("\\\\","");                                if(jsonObject.has("assignmentError"))                                {                                    assignmentError = jsonObject.optString("assignmentError");                                    new MyLog(NMIMSApplication.getAppContext()).debug("assignmentError",assignmentError);                                    progressDialog.cancel();                                }                                if(jsonObject.has("assignmentNote"))                                {                                    assignmentNote = jsonObject.optString("assignmentNote");                                    new MyLog(NMIMSApplication.getAppContext()).debug("assignmentNote",assignmentNote);                                }                                if(jsonObject.has("assignmentSuccess"))                                {                                    assignmentSuccess = jsonObject.optString("assignmentSuccess");                                    new MyLog(NMIMSApplication.getAppContext()).debug("assignmentSuccess",assignmentSuccess);                                    if(jsonObject.has("studentFilePath"))                                    {                                        String studentUploadedFilePath = jsonObject.optString("studentFilePath");                                        dbHelper.updateAssignmentStudentFilePath(assignmentId,studentUploadedFilePath);                                    }                                    progressDialog.cancel();                                }                                if(jsonObject.has("assignmentStatus"))                                {                                    assignmentStatusResponse = jsonObject.optString("assignmentStatus");                                    new MyLog(NMIMSApplication.getAppContext()).debug("assignmentStatusResponse",assignmentStatusResponse);                                    if (assignmentStatusResponse.toLowerCase().startsWith("complete"))                                    {                                        showCustimizedPopUp("Successful", assignmentError+" "+assignmentSuccess +" "+ assignmentNote);                                    }                                    else if (assignmentStatusResponse.toLowerCase().startsWith("pending"))                                    {                                        showCustimizedPopUp("Pending", assignmentError+" "+assignmentSuccess +" "+ assignmentNote);                                    }                                    else                                    {                                        showCustimizedPopUp("Successful", assignmentError+" "+assignmentSuccess +" "+ assignmentNote);                                    }                                    dbHelper.updateAssignmentStatus(assignmentId,assignmentStatusResponse);                                    //dbHelper.updateAssignmentEvaluationStatus(assignmentId);                                }                                progressDialog.cancel();                            }                            catch (JSONException e)                            {                                e.printStackTrace();                                progressDialog.cancel();                            }                        }                    },                    new Response.ErrorListener() {                        @Override                        public void onErrorResponse(VolleyError error)                        {                            Log.d("VolleyErrorFU", "Error: " + error                                    + "\nStatus Code " + error.networkResponse.statusCode                                    + "\nCause " + error.getCause()                                    + "\nnetworkResponse " + error.networkResponse.data.toString()                                    + "\nmessage" + error.getMessage());                           error.printStackTrace();                           progressDialog.cancel();                        }                    }) {                /*                 * If you want to add more parameters with the image                 * you can do it here                 * here we have only one parameter with the image                 * which is tags                 * */                @Override                protected Map<String, String> getParams() throws AuthFailureError {                    Map<String, String> params = new HashMap<>();                    Map<String, Object> mapJ = new HashMap<String, Object>();                    new MyLog(NMIMSApplication.getAppContext()).debug("answerId: ",answerId);                    try {                        mapJ.put("username", username);                        mapJ.put("id",questionId);                    }                    catch (Exception e)                    {                        e.printStackTrace();                    }                    final String mRequestBody = aes.encrypt(new Gson().toJson(mapJ));                    params.put("assignmentSubmission", mRequestBody);                    params.put("username", aes.encrypt(username));                    return params;                }                @Override                protected Map<String, DataPart> getByteData() {                    Map<String, DataPart> params = new HashMap<>();                    params.put("file", new DataPart(fileName ,inputData));                    return params;                }                public Map<String, String> getHeaders() throws AuthFailureError {                    Map<String, String> headers = new HashMap<String, String>();                    headers.put("token", token);//					headers.put("username", username);                    return headers;                }            };            volleyMultipartRequest.setRetryPolicy(new DefaultRetryPolicy(                    8000,                    DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                    DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));            requestQueue.add(volleyMultipartRequest);        }        catch (FileNotFoundException e)        {            e.printStackTrace();            this.e = e;            progressDialog.cancel();        }        catch (IOException e)        {            e.printStackTrace();            this.e = e;            progressDialog.cancel();        }    }    public byte[] getBytes(InputStream inputStream) throws IOException {        ByteArrayOutputStream byteBuffer = new ByteArrayOutputStream();        int bufferSize = 1024;        byte[] buffer = new byte[bufferSize];        int len = 0;        while ((len = inputStream.read(buffer)) != -1) {            byteBuffer.write(buffer, 0, len);        }        return byteBuffer.toByteArray();    }    private String getFileExtension(String fileName)    {        int lastIndexOf = fileName.lastIndexOf(".");        if (lastIndexOf == -1)        {            return "";        }        return fileName.substring(lastIndexOf);    }    private void showCustimizedPopUp(final String Title, String message)    {        new MyLog(NMIMSApplication.getAppContext()).debug("showCustimizedPopUp","showCustimizedPopUp");        AlertDialog.Builder builder = new AlertDialog.Builder(getContext());        builder.setTitle(Title);        builder.setMessage(message);        builder.setCancelable(false);        builder.setPositiveButton(                "OK",                new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int id)                    {                        dialog.cancel();                        if(!Title.equals("Error"))                        {                            getActivity().onBackPressed();                            getActivity().onBackPressed();  // dont delete                            // Back press command is wriiten twice to make it move directly to home screen..                        }                        else                        {                            FragmentTransaction ft = getFragmentManager().beginTransaction();                            ft.detach(StudentAssignmentDetailsFragment.this).attach(StudentAssignmentDetailsFragment.this).commit();                        }                    }                });        AlertDialog alert = builder.create();        alert.show();    }    private boolean fileValidator(String name){        boolean check = false;        if(null == name || name.length() == 0){            return check;        }else{            String nameArr [] = name.split("\\.");            if(nameArr.length == 2){                check = true;            }            else{                check = false;            }            return check;        }    }}