package com.nmims.app.Fragments.Academic;import android.app.Activity;import android.app.ProgressDialog;import android.content.DialogInterface;import android.database.Cursor;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.inputmethod.InputMethodManager;import android.widget.Button;import android.widget.ScrollView;import android.widget.TextView;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AlertDialog;import androidx.fragment.app.Fragment;import com.android.volley.AuthFailureError;import com.android.volley.DefaultRetryPolicy;import com.android.volley.NetworkError;import com.android.volley.NoConnectionError;import com.android.volley.ParseError;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.ServerError;import com.android.volley.TimeoutError;import com.android.volley.VolleyError;import com.android.volley.toolbox.StringRequest;import com.android.volley.toolbox.Volley;import com.google.firebase.analytics.FirebaseAnalytics;import com.nmims.app.Activities.FacultyDrawer;import com.nmims.app.Activities.ParentDrawer;import com.nmims.app.Helpers.AESEncryption;import com.nmims.app.Helpers.Config;import com.nmims.app.Helpers.DBHelper;import com.nmims.app.Helpers.MyLog;import com.nmims.app.Helpers.NMIMSApplication;import com.nmims.app.Helpers.SnackBarUtils;import com.nmims.app.R;import org.json.JSONObject;import java.net.ConnectException;import java.net.SocketException;import java.nio.charset.StandardCharsets;import java.util.HashMap;import java.util.Map;import java.util.regex.Matcher;import java.util.regex.Pattern;public class Faculty_ParentChangePasswordFragment extends Fragment{    private Button savePassword;    private TextView editpassword, editpasswordConfirm, oldpasswordF;    private String newPassword ="", confirmNewPassword ="", sharedPrefschoolName="", userName="",myApiUrlLms="",            myApiUrlUsermgmt="", token="", role ="", oldpassword ="";    private RequestQueue requestQueue;    private ProgressDialog progressDialog;    private DBHelper dbHelper;    private ScrollView fragment_Faculty_ParentChangePasswordFragment;    @Override    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)    {        View view = inflater.inflate(R.layout.fragment_faculty_password_change,container,false);        checkRole();        oldpasswordF = view.findViewById(R.id.oldpasswordF);        editpassword = view.findViewById(R.id.editpasswordF);        editpasswordConfirm = view.findViewById(R.id.editpasswordConfirmF);        savePassword = view.findViewById(R.id.savePasswordF);        fragment_Faculty_ParentChangePasswordFragment = view.findViewById(R.id.fragment_Faculty_ParentChangePasswordFragment);        progressDialog = new ProgressDialog(getContext());        dbHelper = new DBHelper(getContext());        myApiUrlLms = dbHelper.getBackEndControl("myApiUrlLms").getValue();        //myApiUrlLms = Config.myApiUrlLms;        myApiUrlUsermgmt =  dbHelper.getBackEndControl("myApiUrlUsermgmt").getValue();        Cursor cursor = dbHelper.getUserDataValues();        if (cursor!= null){            if(cursor.moveToFirst())            {                new MyLog(NMIMSApplication.getAppContext()).debug("sapid", cursor.getString(cursor.getColumnIndex("sapid")));                sharedPrefschoolName = cursor.getString(cursor.getColumnIndex("currentSchool"));					   //sharedPrefschoolName = Config.sharedPrefschoolName;                userName = cursor.getString(cursor.getColumnIndex("sapid"));                role= cursor.getString(cursor.getColumnIndex("role"));                new MyLog(NMIMSApplication.getAppContext()).debug("sharedPrefschoolName",sharedPrefschoolName);                new MyLog(NMIMSApplication.getAppContext()).debug("userName",userName);                token = cursor.getString(cursor.getColumnIndex("token"));            }        }        fragment_Faculty_ParentChangePasswordFragment.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //////////Don;t Delete            }        });        savePassword.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v)            {                ///////////////////////HIDING KEYBOARD IF IT IS OPENED//////////////                try                {                    InputMethodManager imm = (InputMethodManager) getContext().getSystemService(Activity.INPUT_METHOD_SERVICE);                    imm.hideSoftInputFromWindow(getView().getWindowToken(), 0);                }                catch (Exception e)                {                    e.printStackTrace();                    new MyLog(NMIMSApplication.getAppContext()).debug("HIDING KEYBOARD",e.getMessage());                }                ///////////////////////////////////////////////////////////////////////                oldpassword = oldpasswordF.getText().toString().trim();                newPassword = editpassword.getText().toString().trim();                confirmNewPassword = editpasswordConfirm.getText().toString().trim();                if(!oldpassword.equals("")){                    if(!newPassword.equals(""))                    {                        if(newPassword.length() > 7)                        {                            if(!confirmNewPassword.equals(""))                            {                                if(newPassword.equals(oldpassword)){                                    View view = getActivity().findViewById(android.R.id.content);                                    SnackBarUtils.setSnackBar(view,"Old password and new password cannot be same...");                                    return;                                }                                if(newPassword.equals(userName)){                                    View view = getActivity().findViewById(android.R.id.content);                                    SnackBarUtils.setSnackBar(view,"You cannot use your username as your password");                                }                                if(newPassword.equals(confirmNewPassword))                                {                                    String regex = "^(?=.*[0-9])"                                            + "(?=.*[a-z])(?=.*[A-Z])"                                            + "(?=.*[@#$%^&+=])"                                            + "(?=\\S+$).{8,20}$";                                    Pattern p = Pattern.compile(regex);                                    Matcher m = p.matcher(newPassword);                                    if(!m.matches()){                                        View view = getActivity().findViewById(android.R.id.content);                                        SnackBarUtils.setSnackBar(view,"Password should have at least one lower case alphabet, one upper case alphabets, one digit and\n" +                                                "one special character (a-z, A-Z, 0-9, Special characters etc.)");                                        return;                                    }                                    savePassword(oldpassword);                                }                                else                                {                                    View view = getActivity().findViewById(android.R.id.content);                                    SnackBarUtils.setSnackBar(view,"New Password and Confirm New Password doesn't match...");                                }                            }                            else                            {                                View view = getActivity().findViewById(android.R.id.content);                                SnackBarUtils.setSnackBar(view,"Please Enter Confirm New Password...");                            }                        }                        else                        {                            View view = getActivity().findViewById(android.R.id.content);                            SnackBarUtils.setSnackBar(view,"New Password length should be atleast 8 characters...");                        }                    }                    else                    {                        View view = getActivity().findViewById(android.R.id.content);                        SnackBarUtils.setSnackBar(view,"Please Enter New Password...");                    }                }else                {                    View view = getActivity().findViewById(android.R.id.content);                    SnackBarUtils.setSnackBar(view,"Please Enter Old Password...");                }            }        });        //////////ADDING FIREBASE EVENTS///////////////        FirebaseAnalytics mFirebaseAnalytics = FirebaseAnalytics.getInstance(getContext());        Bundle params = new Bundle();        params.putString("faculty_parent_change_password_fragment", "faculty_parent_change_password_fragment");        mFirebaseAnalytics.logEvent("Faculty_Parent_Change_Password_Fragment", params);        ///////////////////////////////////////////////        return view;    }    private void savePassword(String oldPassword)    {        try        {            progressDialog.setMessage("Updating Password...Please wait");            progressDialog.show();            progressDialog.setCancelable(false);           String URL = myApiUrlUsermgmt +"changePasswordForApp";            //String URL = myApiUrlLms + sharedPrefschoolName+"/changePasswordForApp";            final AESEncryption aes = new AESEncryption(getContext());            new MyLog(NMIMSApplication.getAppContext()).debug("URL",URL);            requestQueue = Volley.newRequestQueue(getContext().getApplicationContext());            Map<String, Object> mapJ = new HashMap<String, Object>();            mapJ.put("username",userName);            mapJ.put("newPasswordMob",newPassword);            mapJ.put("oldPasswordMob",oldPassword);            mapJ.put("reenterPasswordMob",confirmNewPassword);            final String mRequestBody = aes.encryptMap(mapJ);            new MyLog(NMIMSApplication.getAppContext()).debug("mRequestBodyCP",mRequestBody);            StringRequest stringRequest = new StringRequest(Request.Method.POST, URL, new Response.Listener<String>()            {                @Override                public void onResponse(String response)                {                    String respStr = aes.decrypt(response);                    new MyLog(NMIMSApplication.getAppContext()).debug("respStr",respStr);                    if(role.contains("ROLE_FACULTY") && respStr.contains("unauthorised access"))                    {                        progressDialog.dismiss();                        ((FacultyDrawer)getActivity()).unauthorizedAccessFound();                        return;                    }                    try                    {                        JSONObject jsonResponseObj = new JSONObject(respStr);                        String status = "";                        String error ="";                        if(jsonResponseObj.has("Status"))                        {                            status = jsonResponseObj.getString("Status");                            new MyLog(NMIMSApplication.getAppContext()).debug("Update Password Status",status);                            if(status.equalsIgnoreCase("Success"))                            {                                progressDialog.dismiss();                                showUpdateDialog("Success","Password Updated Sucessfully");                            }                            if(status.toLowerCase().equalsIgnoreCase("invalid old password"))                            {                                progressDialog.dismiss();                                showUpdateDialog("Failed","Invalid Old Password");                            }                        }                        if(jsonResponseObj.has("errorMsg"))                        {                            progressDialog.dismiss();                            error = jsonResponseObj.getString("errorMsg");                            new MyLog(NMIMSApplication.getAppContext()).debug("U_P Failed Error",error);                            showUpdateDialog("Error",error);                        }                    }                    catch(Exception je)                    {                        new MyLog(NMIMSApplication.getAppContext()).debug("JSonException",je.getMessage());                        progressDialog.dismiss();                        showUpdateDialog("Error",je.getMessage());                    }                }            }, new Response.ErrorListener()            {                @Override                public void onErrorResponse(VolleyError error)                {                    progressDialog.hide();                    new MyLog(getContext()).debug("LOG_VOLLEY", error.toString());                    if (error instanceof TimeoutError)                    {                        showUpdateDialog("Error","Oops! Connection timeout error!");                    }                    else if (error.getCause() instanceof ConnectException)                    {                        showUpdateDialog("Error","Oops! Unable to reach server!");                    }                    else if (error instanceof NoConnectionError)                    {                        showUpdateDialog("Error","Oops! No Internet Connection Available!");                    }                    else if (error.getCause() instanceof SocketException)                    {                        showUpdateDialog("Error","Oops! We are Sorry Something went wrong. We're working on it now!");                    }                    else if (error instanceof AuthFailureError)                    {                        showUpdateDialog("Error","Oops! Server couldn't find the authenticated request!");                    }                    else if (error instanceof ServerError)                    {                        showUpdateDialog("Error","Oops! No response from server!");                    }                    else if (error instanceof NetworkError)                    {                        showUpdateDialog("Error","Oops! It seems your internet is slow!");                    }                    else if (error instanceof ParseError)                    {                        showUpdateDialog("Error","Oops! Parse Error (because of invalid json or xml)!");                    }                    else                    {                        showUpdateDialog("Error","Oops! An unknown error occurred!");                    }                }            }){                @Override                public String getBodyContentType() {                    return "application/json; charset=utf-8";                }                @Override                public byte[] getBody() throws AuthFailureError {                    return mRequestBody == null ? null : mRequestBody.getBytes(StandardCharsets.UTF_8);                }                public Map<String, String> getHeaders() throws AuthFailureError {                    Map<String, String> headers = new HashMap<String, String>();                    headers.put("token", token);					headers.put("username", userName);                    return headers;                }            };            stringRequest.setRetryPolicy(new DefaultRetryPolicy(15000,                    DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                    DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));            requestQueue.add(stringRequest);        }        catch (Exception e)        {            e.printStackTrace();        }    }    private void showUpdateDialog(final String Title, String Message)    {        try        {            progressDialog.dismiss();            AlertDialog.Builder builder = new AlertDialog.Builder(getContext());            builder.setTitle(Title);            builder.setMessage(Message);            builder.setCancelable(false);            builder.setPositiveButton(                    "OK",                    new DialogInterface.OnClickListener() {                        public void onClick(DialogInterface dialog, int id)                        {                            dialog.cancel();                           if(Title.equalsIgnoreCase("Success"))                           {                               getActivity().onBackPressed();                           }                        }                    });            AlertDialog alert = builder.create();            alert.show();        }        catch (Exception e)        {            e.printStackTrace();        }    }    private void checkRole()    {        DBHelper dbHelper = new DBHelper(getContext());        Cursor cursor = dbHelper.getUserDataValues();        if (cursor!= null)        {            if(cursor.moveToFirst())            {                String role= cursor.getString(cursor.getColumnIndex("role"));                new MyLog(NMIMSApplication.getAppContext()).debug("role", role);                if(role.contains("ROLE_FACULTY"))                {                    ((FacultyDrawer)getActivity()).showShuffleBtn(false);                    ((FacultyDrawer)getActivity()).setActionBarTitle("Change Password");                }                else                {                    ((ParentDrawer)getActivity()).setActionBarTitle("Change Password");                }            }        }    }}