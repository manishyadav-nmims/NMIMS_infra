package com.nmims.app.Fragments.Academic;import android.app.ProgressDialog;import android.database.Cursor;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ScrollView;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.cardview.widget.CardView;import androidx.fragment.app.Fragment;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.android.volley.AuthFailureError;import com.android.volley.DefaultRetryPolicy;import com.android.volley.NetworkError;import com.android.volley.NoConnectionError;import com.android.volley.ParseError;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.ServerError;import com.android.volley.TimeoutError;import com.android.volley.VolleyError;import com.android.volley.toolbox.StringRequest;import com.android.volley.toolbox.Volley;import com.google.firebase.analytics.FirebaseAnalytics;import com.nmims.app.Activities.ParentDrawer;import com.nmims.app.Activities.StudentDrawer;import com.nmims.app.Adapters.ViewInternalMarksDetailsRecyclerViewAdapter;import com.nmims.app.Helpers.AESEncryption;import com.nmims.app.Helpers.Config;import com.nmims.app.Helpers.DBHelper;import com.nmims.app.Helpers.MyLog;import com.nmims.app.Helpers.NMIMSApplication;import com.nmims.app.Helpers.SnackBarUtils;import com.nmims.app.Models.ICAComponentsDataModel;import com.nmims.app.Models.InternalMarksDataModel;import com.nmims.app.R;import org.json.JSONArray;import org.json.JSONObject;import java.net.ConnectException;import java.net.SocketException;import java.nio.charset.StandardCharsets;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class ViewInternalMarksDetailsFragment extends Fragment{    private InternalMarksDataModel internalMarksDataModel;    private RequestQueue requestQueue;    private ProgressDialog progressDialog;    private RecyclerView icaComponentsRecyclerview;    private CardView detailsContainerICA;    private ScrollView fragments_ViewInternalMarksDetailsFragment;    private List<ICAComponentsDataModel> icaComponentsDataModelList = new ArrayList<>();    private String role="",  myApiUrlLms="", sharedPrefschoolName="" ,username="", icaId="",            subjectName ="",year="",semester="",totalMarksObtained="",remarks="",status="",publishedDate="", token="";    private DBHelper dbHelper;    @Override    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)    {        View view = inflater.inflate(R.layout.fragment_view_internal_marks_details, container, false);        dbHelper = new DBHelper(getContext());        myApiUrlLms = dbHelper.getBackEndControl("myApiUrlLms").getValue();        //myApiUrlLms = Config.myApiUrlLms;        requestQueue = Volley.newRequestQueue(getContext().getApplicationContext());        Bundle bundle = this.getArguments();        internalMarksDataModel = bundle.getParcelable("internalMarksDataModel");        initialize(view);        return view;    }    private void loadPageData()    {        icaId = internalMarksDataModel.getIcaId();        subjectName = internalMarksDataModel.getModuleName();        semester = internalMarksDataModel.getAcadSession();        year = internalMarksDataModel.getAcadYear();        totalMarksObtained = internalMarksDataModel.getIcaTotalMarks();        remarks = internalMarksDataModel.getRemarks();        status = internalMarksDataModel.getPassFailStatus();        publishedDate = internalMarksDataModel.getPublishedDate();    }    private void initialize(final View view)    {        detailsContainerICA = view.findViewById(R.id.detailsContainerICA);        fragments_ViewInternalMarksDetailsFragment = view.findViewById(R.id.fragments_ViewInternalMarksDetailsFragment);        icaComponentsRecyclerview = view.findViewById(R.id.icaComponentsRecyclerview);        icaComponentsRecyclerview.setHasFixedSize(true);        icaComponentsRecyclerview.setLayoutManager(new LinearLayoutManager(getActivity()));        fragments_ViewInternalMarksDetailsFragment.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                /////////////////Dont delete            }        });        checkRole();        //////////ADDING FIREBASE EVENTS///////////////        FirebaseAnalytics mFirebaseAnalytics = FirebaseAnalytics.getInstance(getContext());        Bundle params = new Bundle();        params.putString("student_ica_list_fragment", "student_ica_list_fragment");        mFirebaseAnalytics.logEvent("Student_ICA_Details_Fragment", params);        ///////////////////////////////////////////////    }    private void checkRole()    {        DBHelper dbHelper = new DBHelper(getContext());        Cursor cursor = dbHelper.getUserDataValues();        if (cursor!= null)        {            if(cursor.moveToFirst())            {                role= cursor.getString(cursor.getColumnIndex("role"));                username = cursor.getString(cursor.getColumnIndex("sapid"));                sharedPrefschoolName = cursor.getString(cursor.getColumnIndex("currentSchool"));					   //sharedPrefschoolName = Config.sharedPrefschoolName;                new MyLog(NMIMSApplication.getAppContext()).debug("role", role);                new MyLog(NMIMSApplication.getAppContext()).debug("username", username);                new MyLog(NMIMSApplication.getAppContext()).debug("sharedPrefschoolName", sharedPrefschoolName);                token = cursor.getString(cursor.getColumnIndex("token"));                if(role.contains("ROLE_STUDENT"))                {                    ((StudentDrawer)getActivity()).setActionBarTitle("ICA Marks");                    ((StudentDrawer)getActivity()).showAnnouncements(false);                }                else                {                    ((ParentDrawer)getActivity()).setActionBarTitle("ICA Marks");                }            }        }        loadPageData();        loadComponents();    }    private void loadComponents()    {        try        {            progressDialog = new ProgressDialog(getContext());            progressDialog.setMessage("Loading data...");            progressDialog.show();            new MyLog(NMIMSApplication.getAppContext()).debug("getInternalMarkDetails", "getInternalMarkDetails");            final AESEncryption aes = new AESEncryption(getContext());            String URL = myApiUrlLms + sharedPrefschoolName+"/showInternalComponentMarksForApp";            new MyLog(NMIMSApplication.getAppContext()).debug("URL",URL);            Map<String, Object> mapJ = new HashMap<String, Object>();            if(role.contains("ROLE_PARENT"))            {                username = username.substring(0,username.length()-2);            }            mapJ.put("username",username);            mapJ.put("icaId",internalMarksDataModel.getIcaId());            new MyLog(NMIMSApplication.getAppContext()).debug("icaId",icaId);            final String mRequestBody = aes.encryptMap(mapJ);            StringRequest stringRequest = new StringRequest(Request.Method.POST, URL, new Response.Listener<String>()            {                @Override                public void onResponse(String response)                {                    String respStr = aes.decrypt(response);                    if(!role.contains("ROLE_PARENT") && respStr.contains("unauthorised access"))                    {                        progressDialog.dismiss();                        ((StudentDrawer)getActivity()).unauthorizedAccessFound();                        return;                    }                    try                    {                        JSONArray jsonArray = new JSONArray(respStr);                        new MyLog(NMIMSApplication.getAppContext()).debug("jsonArray", String.valueOf(jsonArray.length()));                        if(jsonArray.length() < 1 || jsonArray.length() == 0)                        {                            progressDialog.dismiss();                            View view = getActivity().findViewById(android.R.id.content);                            SnackBarUtils.setSnackBar(view,"No Data Found...");                        }                        else                        {                            //////////////                            new MyLog(NMIMSApplication.getAppContext()).debug("SemesterData",semester);                            ICAComponentsDataModel icaComponentsDataModel1 = new ICAComponentsDataModel("", "Subject",subjectName);                            icaComponentsDataModelList.add(icaComponentsDataModel1);                            ICAComponentsDataModel icaComponentsDataModel2 = new ICAComponentsDataModel("", "Year",year);                            icaComponentsDataModelList.add(icaComponentsDataModel2);                            ICAComponentsDataModel icaComponentsDataModel3 = new ICAComponentsDataModel("", "Semester",semester);                            icaComponentsDataModelList.add(icaComponentsDataModel3);                            /////////////                            for(int i = 0; i <jsonArray.length(); i++)                            {                                JSONObject jsonResponseObj = jsonArray.getJSONObject(i);                                String componentId="", componentName="", componentsMarks="";                                if(jsonResponseObj.has("componentId"))                                {                                    componentId = jsonResponseObj.getString("componentId");                                }                                if(jsonResponseObj.has("componentName"))                                {                                    componentName = jsonResponseObj.getString("componentName");                                }                                if(jsonResponseObj.has("marks"))                                {                                    componentsMarks = jsonResponseObj.getString("marks");                                }                                ICAComponentsDataModel icaComponentsDataModel = new ICAComponentsDataModel(componentId, componentName,componentsMarks);                                icaComponentsDataModelList.add(icaComponentsDataModel);                            }                            //////////////                            ICAComponentsDataModel icaComponentsDataModel4 = new ICAComponentsDataModel("", "Marks Obtained",totalMarksObtained);                            icaComponentsDataModelList.add(icaComponentsDataModel4);                            ICAComponentsDataModel icaComponentsDataModel5 = new ICAComponentsDataModel("", "Remarks",remarks);                            icaComponentsDataModelList.add(icaComponentsDataModel5);                            ICAComponentsDataModel icaComponentsDataModel6 = new ICAComponentsDataModel("", "Status",status);                            icaComponentsDataModelList.add(icaComponentsDataModel6);                            ICAComponentsDataModel icaComponentsDataModel7 = new ICAComponentsDataModel("", "Published Date",publishedDate);                            icaComponentsDataModelList.add(icaComponentsDataModel7);                            /////////////                            ViewInternalMarksDetailsRecyclerViewAdapter viewInternalMarksDetailsRecyclerViewAdapter = new ViewInternalMarksDetailsRecyclerViewAdapter(getContext(), icaComponentsDataModelList);                            icaComponentsRecyclerview.setAdapter(viewInternalMarksDetailsRecyclerViewAdapter);                            detailsContainerICA.setVisibility(View.VISIBLE);                            progressDialog.dismiss();                        }                    }                    catch(Exception je)                    {                        progressDialog.dismiss();                        new MyLog(NMIMSApplication.getAppContext()).debug("JsonException",je.getMessage());                    }                }            }, new Response.ErrorListener()            {                @Override                public void onErrorResponse(VolleyError error)                {                    progressDialog.dismiss();                    new MyLog(getContext()).debug("LOG_VOLLEY", error.toString());                    if (error instanceof TimeoutError)                    {                        View view = getActivity().findViewById(android.R.id.content);                            SnackBarUtils.setSnackBar(view,"Oops! Connection timeout error!");                            (getActivity()).onBackPressed();                    }                    else if (error.getCause() instanceof ConnectException)                    {                        View view = getActivity().findViewById(android.R.id.content);                        SnackBarUtils.setSnackBar(view,"Oops! Unable to reach server!");                        (getActivity()).onBackPressed();                    }                    else if (error instanceof NoConnectionError)                    {                        View view = getActivity().findViewById(android.R.id.content);                        SnackBarUtils.setSnackBar(view,"Oops! No Internet Connection Available!");                        (getActivity()).onBackPressed();                    }                    else if (error.getCause() instanceof SocketException)                    {                        View view = getActivity().findViewById(android.R.id.content);                        SnackBarUtils.setSnackBar(view,"Oops! We are Sorry Something went wrong. We're working on it now!");                        (getActivity()).onBackPressed();                    }                    else if (error instanceof AuthFailureError)                    {                        View view = getActivity().findViewById(android.R.id.content);                        SnackBarUtils.setSnackBar(view,"Oops! Server couldn't find the authenticated request!");                        (getActivity()).onBackPressed();                    }                    else if (error instanceof ServerError)                    {                        View view = getActivity().findViewById(android.R.id.content);                        SnackBarUtils.setSnackBar(view,"Oops! No response from server!");                        (getActivity()).onBackPressed();                    }                    else if (error instanceof NetworkError)                    {                        View view = getActivity().findViewById(android.R.id.content);                        SnackBarUtils.setSnackBar(view,"Oops! It seems your internet is slow!");                        (getActivity()).onBackPressed();                    }                    else if (error instanceof ParseError)                    {                        View view = getActivity().findViewById(android.R.id.content);                        SnackBarUtils.setSnackBar(view,"Oops! Parse Error (because of invalid json or xml)!");                        (getActivity()).onBackPressed();                    }                    else                    {                        View view = getActivity().findViewById(android.R.id.content);                        SnackBarUtils.setSnackBar(view,"Oops! An unknown error occurred!");                        (getActivity()).onBackPressed();                    }                }            }){                @Override                public String getBodyContentType() {                    return "application/json; charset=utf-8";                }                @Override                public byte[] getBody() throws AuthFailureError {                    return mRequestBody == null ? null : mRequestBody.getBytes(StandardCharsets.UTF_8);                }                public Map<String, String> getHeaders() throws AuthFailureError {                    Map<String, String> headers = new HashMap<String, String>();                    headers.put("token", token);					headers.put("username", username);                    return headers;                }            };            stringRequest.setRetryPolicy(new DefaultRetryPolicy(15000,                    DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                    DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));            requestQueue.add(stringRequest);        }        catch (Exception e)        {            progressDialog.dismiss();            new MyLog(NMIMSApplication.getAppContext()).debug("IM_Details Exception", e.getMessage());        }    }}