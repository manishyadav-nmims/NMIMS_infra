package com.nmims.app.Fragments.Academic;import android.app.Activity;import android.app.ProgressDialog;import android.content.DialogInterface;import android.database.Cursor;import android.os.Bundle;import android.text.TextUtils;import android.util.Log;import android.util.Patterns;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.inputmethod.InputMethodManager;import android.widget.Button;import android.widget.EditText;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AlertDialog;import androidx.fragment.app.Fragment;import androidx.fragment.app.FragmentManager;import com.android.volley.AuthFailureError;import com.android.volley.DefaultRetryPolicy;import com.android.volley.NetworkError;import com.android.volley.NoConnectionError;import com.android.volley.ParseError;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.ServerError;import com.android.volley.TimeoutError;import com.android.volley.VolleyError;import com.android.volley.toolbox.StringRequest;import com.android.volley.toolbox.Volley;import com.google.firebase.analytics.FirebaseAnalytics;import com.nmims.app.Activities.StudentDrawer;import com.nmims.app.Helpers.AESEncryption;import com.nmims.app.Helpers.Config;import com.nmims.app.Helpers.DBHelper;import com.nmims.app.Helpers.MyLog;import com.nmims.app.Helpers.NMIMSApplication;import com.nmims.app.Helpers.SnackBarUtils;import com.nmims.app.R;import org.json.JSONObject;import java.net.ConnectException;import java.net.SocketException;import java.nio.charset.StandardCharsets;import java.util.HashMap;import java.util.Map;import java.util.regex.Matcher;import java.util.regex.Pattern;public class StudentEditProfileFragment extends Fragment{    private EditText editEmail, editphone, editOldpassword, editpassword, editpasswordConfirm, enterOTP;    private Button saveDetails, savePassword, generateOtp;    private String email ="", oldPassword="" ,password ="",  myApiUrlLms="", confirmPassword="", phone="",OTP="",            previousEmail, previousPhone="", sharedPrefschoolName="", userName="", token="", myApiUrlUsermgmt ="";    private DBHelper dbHelper;    private RequestQueue requestQueue;    private ProgressDialog progressDialog;    @Override    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)    {        View view = inflater.inflate(R.layout.fragment_student_edit_profile, container,false);        ((StudentDrawer)getActivity()).setActionBarTitle("Profile");        ((StudentDrawer)getActivity()).showAnnouncements(false);        editEmail = view.findViewById(R.id.editEmail);        editphone = view.findViewById(R.id.editphone);        enterOTP = view.findViewById(R.id.enterOTP);        generateOtp = view.findViewById(R.id.generateOtp);        editOldpassword = view.findViewById(R.id.editOldpassword);        editpassword = view.findViewById(R.id.editpassword);        editpasswordConfirm = view.findViewById(R.id.editpasswordConfirm);        saveDetails = view.findViewById(R.id.saveDetails);        savePassword = view.findViewById(R.id.savePassword);        progressDialog = new ProgressDialog(getContext());        dbHelper = new DBHelper(getContext());        myApiUrlLms = dbHelper.getBackEndControl("myApiUrlLms").getValue();       // myApiUrlLms = Config.myApiUrlLms;        myApiUrlUsermgmt =  dbHelper.getBackEndControl("myApiUrlUsermgmt").getValue();        Cursor cursor = dbHelper.getUserDataValues();        if (cursor!= null){            if(cursor.moveToFirst())            {                new MyLog(NMIMSApplication.getAppContext()).debug("sapid", cursor.getString(cursor.getColumnIndex("sapid")));                previousEmail = cursor.getString(cursor.getColumnIndex("emailId"));                previousPhone = cursor.getString(cursor.getColumnIndex("mobile"));                sharedPrefschoolName = cursor.getString(cursor.getColumnIndex("currentSchool"));					   //sharedPrefschoolName = Config.sharedPrefschoolName;                userName = cursor.getString(cursor.getColumnIndex("sapid"));                token = cursor.getString(cursor.getColumnIndex("token"));                editEmail.setText(previousEmail);                editphone.setText(previousPhone);                new MyLog(NMIMSApplication.getAppContext()).debug("previousEmail",previousEmail);                new MyLog(NMIMSApplication.getAppContext()).debug("previousPhone",previousPhone);                new MyLog(NMIMSApplication.getAppContext()).debug("sharedPrefschoolName",sharedPrefschoolName);                new MyLog(NMIMSApplication.getAppContext()).debug("userName",userName);            }        }        new MyLog(NMIMSApplication.getAppContext()).debug("email",email);        new MyLog(NMIMSApplication.getAppContext()).debug("phone",phone);        new MyLog(NMIMSApplication.getAppContext()).debug("password",password);        new MyLog(NMIMSApplication.getAppContext()).debug("confirmPassword",confirmPassword);       // ----------------------------------------------------------        generateOtp.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                try                {                    progressDialog.setMessage("Sending OTP...Please wait");                    progressDialog.setCancelable(false);                    progressDialog.show();                    String PWD="PWD", requestedBy="";                    String URL = myApiUrlUsermgmt+"generateOtp";                    new MyLog(NMIMSApplication.getAppContext()).debug("URL",URL);                    requestQueue = Volley.newRequestQueue(getContext().getApplicationContext());                    final JSONObject jsonObject = new JSONObject();                    jsonObject.put("username",userName);                    jsonObject.put("action",PWD);                    jsonObject.put("requestedBy",requestedBy);                    final String mRequestBody = jsonObject.toString();                    Log.d("Sending OTP",mRequestBody);                    StringRequest stringRequest = new StringRequest(Request.Method.POST, URL, new Response.Listener<String>()                    {                        @Override                        public void onResponse(String response)                        {                            Log.i("LOG_VOLLEY", response);                            try                            {                                JSONObject jsonResponseObj = new JSONObject(response);                                String status = "";                                String error ="";                                if(jsonResponseObj.has("status"))                                {                                    status = jsonResponseObj.getString("status");                                    new MyLog(NMIMSApplication.getAppContext()).debug("Update Details Status",status);                                    if(status.equalsIgnoreCase("200"))                                    {                                        showUpdateDialog("Success","OTP Send Successfully, Kindly Check Your Registered Email","SendOTP");                                        generateOtp.setVisibility(View.GONE);                                        enterOTP.setVisibility(View.VISIBLE);                                        saveDetails.setVisibility(View.VISIBLE);                                        progressDialog.dismiss();                                    }                                }                                if(jsonResponseObj.has("400"))                                {                                    progressDialog.dismiss();                                    error = jsonResponseObj.getString("errorMsg");                                    new MyLog(NMIMSApplication.getAppContext()).debug("S_D Failed Error",error);                                    showUpdateDialog("Error",error,"SendOTP");                                }                            }                            catch(Exception je)                            {                                progressDialog.dismiss();//                        errorMsgS.setVisibility(View.GONE);//                        loaderP.setVisibility(View.GONE);                                new MyLog(NMIMSApplication.getAppContext()).debug("JSonException",je.getMessage());                                showUpdateDialog("Error",je.getMessage(),"SendOTP");                            }                        }                    }, new Response.ErrorListener()                    {                        @Override                        public void onErrorResponse(VolleyError error)                        {//                    errorMsgS.setVisibility(View.GONE);//                    loaderP.setVisibility(View.GONE);                            progressDialog.dismiss();                            progressDialog.hide();                            new MyLog(getContext()).debug("LOG_VOLLEY", error.toString());                            if (error instanceof TimeoutError)                            {                                showUpdateDialog("Error","Oops! Connection timeout error!","SendOTP");                            }                            else if (error.getCause() instanceof ConnectException)                            {                                showUpdateDialog("Error","Oops! Unable to reach server!","SendOTP");                            }                            else if (error instanceof NoConnectionError)                            {                                showUpdateDialog("Error","Oops! No Internet Connection Available!","SendOTP");                            }                            else if (error.getCause() instanceof SocketException)                            {                                showUpdateDialog("Error","Oops! We are Sorry Something went wrong. We're working on it now!","SendOTP");                            }                            else if (error instanceof AuthFailureError)                            {                                showUpdateDialog("Error","Oops! Server couldn't find the authenticated request!","SendOTP");                            }                            else if (error instanceof ServerError)                            {                                showUpdateDialog("Error","Oops! No response from server!","SendOTP");                            }                            else if (error instanceof NetworkError)                            {                                showUpdateDialog("Error","Oops! It seems your internet is slow!","SendOTP");                            }                            else if (error instanceof ParseError)                            {                                showUpdateDialog("Error","Oops! Parse Error (because of invalid json or xml)!","SendOTP");                            }                            else                            {                                showUpdateDialog("Error","Oops! An unknown error occurred!","SendOTP");                            }                        }                    }){                        @Override                        public String getBodyContentType() {                            return "application/json; charset=utf-8";                        }                        @Override                        public byte[] getBody() throws AuthFailureError {                            return mRequestBody == null ? null : mRequestBody.getBytes(StandardCharsets.UTF_8);                        }                    };                    stringRequest.setRetryPolicy(new DefaultRetryPolicy(15000,                            DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                            DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));                    requestQueue.add(stringRequest);                }                catch (Exception e)                {                    e.printStackTrace();                    showUpdateDialog("Error",e.getMessage(),"SendOTP");                }            }        });        //-----------------------------------------------------------------------        saveDetails.setOnClickListener(new View.OnClickListener()        {            @Override            public void onClick(View v)            {                ///////////////////////HIDING KEYBOARD IF IT IS OPENED//////////////                try                {                    InputMethodManager imm = (InputMethodManager) getContext().getSystemService(Activity.INPUT_METHOD_SERVICE);                    imm.hideSoftInputFromWindow(getView().getWindowToken(), 0);                }                catch (Exception e)                {                    e.printStackTrace();                    new MyLog(NMIMSApplication.getAppContext()).debug("HIDING KEYBOARD",e.getMessage());                }                ///////////////////////////////////////////////////////////////////////                email = editEmail.getText().toString().trim();                phone = editphone.getText().toString().trim();                OTP= enterOTP.getText().toString().trim();                if(TextUtils.isEmpty(email))                {                    View view = getActivity().findViewById(android.R.id.content);                    SnackBarUtils.setSnackBar(view,"Please enter email id...");                }                else {                    if (TextUtils.isEmpty(phone)) {                        View view = getActivity().findViewById(android.R.id.content);                        SnackBarUtils.setSnackBar(view, "Please phone number...");                    }                    if (TextUtils.isEmpty(OTP)) {                        View view = getActivity().findViewById(android.R.id.content);                        SnackBarUtils.setSnackBar(view, "Please enter OTP...");                    }                    else                    {                        if (!previousEmail.equals(email) || !previousPhone.equals(phone)) {                            String emailPattern = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@" + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";                            if (Pattern.compile(emailPattern).matcher(email).matches()) {                                if (!Pattern.matches("[a-zA-Z]", phone)) {                                    if (Patterns.PHONE.matcher(phone).matches()) {                                        if (phone.length() == 10) {                                            saveDetails();                                        } else {                                            View view = getActivity().findViewById(android.R.id.content);                                            SnackBarUtils.setSnackBar(view, "Phone number must be 10 digits...");                                        }                                    } else {                                        View view = getActivity().findViewById(android.R.id.content);                                        SnackBarUtils.setSnackBar(view, "Invalid phone number...");                                    }                                } else {                                    View view = getActivity().findViewById(android.R.id.content);                                    SnackBarUtils.setSnackBar(view, "Phone number must not contain alphabets...");                                }                            } else {                                View view = getActivity().findViewById(android.R.id.content);                                SnackBarUtils.setSnackBar(view, "Invalid Email Address...");                            }                        } else {                            View view = getActivity().findViewById(android.R.id.content);                            SnackBarUtils.setSnackBar(view, "You have not changed email or phone");                        }                    }                }            }        });        savePassword.setOnClickListener(new View.OnClickListener()        {            @Override            public void onClick(View v)            {                ///////////////////////HIDING KEYBOARD IF IT IS OPENED//////////////                try                {                    InputMethodManager imm = (InputMethodManager) getContext().getSystemService(Activity.INPUT_METHOD_SERVICE);                    imm.hideSoftInputFromWindow(getView().getWindowToken(), 0);                }                catch (Exception e)                {                    e.printStackTrace();                    new MyLog(NMIMSApplication.getAppContext()).debug("HIDING KEYBOARD",e.getMessage());                }                ///////////////////////////////////////////////////////////////////////                oldPassword = editOldpassword.getText().toString().trim();                password = editpassword.getText().toString().trim();                confirmPassword = editpasswordConfirm.getText().toString().trim();                if(!oldPassword.equals("")){                    if(!password.equals(""))                    {                        if(password.length() > 7)                        {                            if(!confirmPassword.equals(""))                            {                                if(password.equals(oldPassword)){                                    View view = getActivity().findViewById(android.R.id.content);                                    SnackBarUtils.setSnackBar(view,"Old password and new password cannot be same...");                                    return;                                }                                if(password.equals(userName)){                                    View view = getActivity().findViewById(android.R.id.content);                                    SnackBarUtils.setSnackBar(view,"You cannot use your username as your password");                                }                                if(password.equals(confirmPassword))                                {                                    String regex = "^(?=.*[0-9])"                                            + "(?=.*[a-z])(?=.*[A-Z])"                                            + "(?=.*[@#$%^&+=])"                                            + "(?=\\S+$).{8,20}$";                                    Pattern p = Pattern.compile(regex);                                    Matcher m = p.matcher(password);                                    if(!m.matches()){                                        View view = getActivity().findViewById(android.R.id.content);                                        SnackBarUtils.setSnackBar(view,"Password should have at least one lower case alphabet, one upper case alphabets, one digit and\n" +                                                "one special character (a-z, A-Z, 0-9, Special characters etc.)");                                        return;                                    }                                    savePassword();                                }                                else                                {                                    View view = getActivity().findViewById(android.R.id.content);                                    SnackBarUtils.setSnackBar(view,"New Password and Confirm New Password doesn't match...");                                }                            }                            else                            {                                View view = getActivity().findViewById(android.R.id.content);                                SnackBarUtils.setSnackBar(view,"Please Enter Confirm New Password...");                            }                        }                        else                        {                            View view = getActivity().findViewById(android.R.id.content);                            SnackBarUtils.setSnackBar(view,"New Password length should be atleast 8 characters...");                        }                    }                    else                    {                        View view = getActivity().findViewById(android.R.id.content);                        SnackBarUtils.setSnackBar(view,"Please Enter New Password...");                    }                }else                {                    View view = getActivity().findViewById(android.R.id.content);                    SnackBarUtils.setSnackBar(view,"Please Enter Old Password...");                }            }        });        //////////ADDING FIREBASE EVENTS///////////////        FirebaseAnalytics mFirebaseAnalytics = FirebaseAnalytics.getInstance(getContext());        Bundle params = new Bundle();        params.putString("stud_edit_profile_fragment", "stud_edit_profile_fragment");        mFirebaseAnalytics.logEvent("Stud_Edit_Profile_Fragment", params);        ///////////////////////////////////////////////        return view;    }    private void saveDetails()    {        try        {            progressDialog.setMessage("Updating Details...Please wait");            progressDialog.show();            final AESEncryption aes = new AESEncryption(getContext());            String URL = myApiUrlLms + sharedPrefschoolName+"/updateProfileForApp";            new MyLog(NMIMSApplication.getAppContext()).debug("URL",URL);            requestQueue = Volley.newRequestQueue(getContext().getApplicationContext());            Map<String, Object> mapJ = new HashMap<String, Object>();            mapJ.put("username",userName);            mapJ.put("email",email);            mapJ.put("mobile",phone);            mapJ.put("otp",OTP);            final String mRequestBody = aes.encryptMap(mapJ);            new MyLog(NMIMSApplication.getAppContext()).debug("mRequestBodyEM",mRequestBody);            StringRequest stringRequest = new StringRequest(Request.Method.POST, URL, new Response.Listener<String>()            {                @Override                public void onResponse(String response)                {                    String respStr = aes.decrypt(response);                    Log.d("profileupdate",respStr);                    if(respStr.contains("unauthorised access"))                    {                        progressDialog.dismiss();                        ((StudentDrawer)getActivity()).unauthorizedAccessFound();                        return;                    }                    try                    {                        JSONObject jsonResponseObj = new JSONObject(respStr);                        String status = "";                        String error ="";                        if(jsonResponseObj.has("Status"))                        {                            status = jsonResponseObj.optString("Status");                            new MyLog(NMIMSApplication.getAppContext()).debug("Update Details Status",status);                            if(status.equalsIgnoreCase("Success"))                            {                                showUpdateDialog("Success","Profile Updated Sucessfully","saveDetails");                                generateOtp.setVisibility(View.VISIBLE);                                enterOTP.setVisibility(View.GONE);                                saveDetails.setVisibility(View.GONE);                                progressDialog.dismiss();                                dbHelper.updateUserDetails(email,phone);                                ////////////////////////TEST PURPOSE////////////////                                Cursor cursor = dbHelper.getUserDataValues();                                if (cursor!= null){                                    if(cursor.moveToFirst())                                    {                                        new MyLog(NMIMSApplication.getAppContext()).debug("Updated EmailID", cursor.getString(cursor.getColumnIndex("emailId")));                                        new MyLog(NMIMSApplication.getAppContext()).debug("Updated Phone Number", cursor.getString(cursor.getColumnIndex("mobile")));                                    }                                }                                ///////////////////////////////////////////////////                            }                        }                        if(jsonResponseObj.has("errorMsg"))                        {                            error = jsonResponseObj.getString("errorMsg");                            new MyLog(NMIMSApplication.getAppContext()).debug("S_D Failed Error",error);                            showUpdateDialog("Error",error,"saveDetails");                        }                    }                    catch(Exception je)                    {//                        errorMsgS.setVisibility(View.GONE);//                        loaderP.setVisibility(View.GONE);                        new MyLog(NMIMSApplication.getAppContext()).debug("JSonException",je.getMessage());                        showUpdateDialog("Error",je.getMessage(),"saveDetails");                    }                }            }, new Response.ErrorListener()            {                @Override                public void onErrorResponse(VolleyError error)                {//                    errorMsgS.setVisibility(View.GONE);//                    loaderP.setVisibility(View.GONE);                    progressDialog.hide();                    new MyLog(getContext()).debug("LOG_VOLLEY", error.toString());                    if (error instanceof TimeoutError)                    {                        showUpdateDialog("Error","Oops! Connection timeout error!","saveDetails");                    }                    else if (error.getCause() instanceof ConnectException)                    {                        showUpdateDialog("Error","Oops! Unable to reach server!","saveDetails");                    }                    else if (error instanceof NoConnectionError)                    {                        showUpdateDialog("Error","Oops! No Internet Connection Available!","saveDetails");                    }                    else if (error.getCause() instanceof SocketException)                    {                        showUpdateDialog("Error","Oops! We are Sorry Something went wrong. We're working on it now!","saveDetails");                    }                    else if (error instanceof AuthFailureError)                    {                        showUpdateDialog("Error","Oops! Server couldn't find the authenticated request!","saveDetails");                    }                    else if (error instanceof ServerError)                    {                        showUpdateDialog("Error","Oops! No response from server!","saveDetails");                    }                    else if (error instanceof NetworkError)                    {                        showUpdateDialog("Error","Oops! It seems your internet is slow!","saveDetails");                    }                    else if (error instanceof ParseError)                    {                        showUpdateDialog("Error","Oops! Parse Error (because of invalid json or xml)!","saveDetails");                    }                    else                    {                        showUpdateDialog("Error","Oops! An unknown error occurred!","saveDetails");                    }                }            }){                @Override                public String getBodyContentType() {                    return "application/json; charset=utf-8";                }                @Override                public byte[] getBody() throws AuthFailureError {                    return mRequestBody == null ? null : mRequestBody.getBytes(StandardCharsets.UTF_8);                }                public Map<String, String> getHeaders() throws AuthFailureError {                    Map<String, String> headers = new HashMap<String, String>();                    headers.put("token", token);					headers.put("username", userName);                    return headers;                }            };            stringRequest.setRetryPolicy(new DefaultRetryPolicy(15000,                    DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                    DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));            requestQueue.add(stringRequest);        }        catch (Exception e)        {            e.printStackTrace();            showUpdateDialog("Error",e.getMessage(),"saveDetails");        }    }    private void savePassword()    {        try        {            progressDialog.setMessage("Updating Password...Please wait");            progressDialog.show();            String URL = myApiUrlUsermgmt +"changePasswordForApp";            final AESEncryption aes = new AESEncryption(getContext());           // String URL = myApiUrlLms+sharedPrefschoolName +"/changePasswordForApp";            new MyLog(NMIMSApplication.getAppContext()).debug("URL",URL);            requestQueue = Volley.newRequestQueue(getContext().getApplicationContext());            Map<String, Object> mapJ = new HashMap<String, Object>();            mapJ.put("username",userName);            mapJ.put("oldPasswordMob",oldPassword);            mapJ.put("newPasswordMob",password);            mapJ.put("reenterPasswordMob",confirmPassword);            final String mRequestBody = aes.encryptMap(mapJ);            new MyLog(NMIMSApplication.getAppContext()).debug("mRequestBody",mRequestBody);            StringRequest stringRequest = new StringRequest(Request.Method.POST, URL, new Response.Listener<String>()            {                @Override                public void onResponse(String response)                {                    String respStr = aes.decrypt(response);                    if(respStr.contains("unauthorised access"))                    {                        progressDialog.dismiss();                        ((StudentDrawer)getActivity()).unauthorizedAccessFound();                        return;                    }                    try                    {                        JSONObject jsonResponseObj = new JSONObject(respStr);                        String status = "";                        String error ="";                        if(jsonResponseObj.has("Status"))                        {                            status = jsonResponseObj.getString("Status");                            new MyLog(NMIMSApplication.getAppContext()).debug("Update Password Status",status);                            if(status.equalsIgnoreCase("Success"))                            {                                showUpdateDialog("Success","Password Updated Sucessfully","savePassword");                            }                            else if(status.toLowerCase().equalsIgnoreCase("invalid old password"))                            {                                showUpdateDialog("Failed","Invalid Old Password","savePassword");                            }                            else{                                showUpdateDialog("Failed",status,"savePassword");                            }                        }                        if(jsonResponseObj.has("errorMsg"))                        {                            error = jsonResponseObj.getString("errorMsg");                            new MyLog(NMIMSApplication.getAppContext()).debug("U_P Failed Error",error);                            showUpdateDialog("Error",error,"savePassword");                        }                    }                    catch(Exception je)                    {                        new MyLog(NMIMSApplication.getAppContext()).debug("JSonException",je.getMessage());                    }                }            }, new Response.ErrorListener()            {                @Override                public void onErrorResponse(VolleyError error)                {                    progressDialog.hide();                    new MyLog(getContext()).debug("LOG_VOLLEY", error.toString());                    if (error instanceof TimeoutError)                    {                        showUpdateDialog("Error","Oops! Connection timeout error!","savePassword");                    }                    else if (error.getCause() instanceof ConnectException)                    {                        showUpdateDialog("Error","Oops! Unable to reach server!","savePassword");                    }                    else if (error instanceof NoConnectionError)                    {                        showUpdateDialog("Error","Oops! No Internet Connection Available!","savePassword");                    }                    else if (error.getCause() instanceof SocketException)                    {                        showUpdateDialog("Error","Oops! We are Sorry Something went wrong. We're working on it now!","savePassword");                    }                    else if (error instanceof AuthFailureError)                    {                        showUpdateDialog("Error","Oops! Server couldn't find the authenticated request!","savePassword");                    }                    else if (error instanceof ServerError)                    {                        showUpdateDialog("Error","Oops! No response from server!","savePassword");                    }                    else if (error instanceof NetworkError)                    {                        showUpdateDialog("Error","Oops! It seems your internet is slow!","savePassword");                    }                    else if (error instanceof ParseError)                    {                        showUpdateDialog("Error","Oops! Parse Error (because of invalid json or xml)!","savePassword");                    }                    else                    {                        showUpdateDialog("Error","Oops! An unknown error occurred!","savePassword");                    }                }            }){                @Override                public String getBodyContentType() {                    return "application/json; charset=utf-8";                }                @Override                public byte[] getBody() throws AuthFailureError {                    return mRequestBody == null ? null : mRequestBody.getBytes(StandardCharsets.UTF_8);                }                public Map<String, String> getHeaders() throws AuthFailureError {                    Map<String, String> headers = new HashMap<String, String>();                    headers.put("token", token);					headers.put("username", userName);                    return headers;                }            };            stringRequest.setRetryPolicy(new DefaultRetryPolicy(15000,                    DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                    DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));            requestQueue.add(stringRequest);        }        catch (Exception e)        {            e.printStackTrace();        }    }    private void showUpdateDialog(String Title, String Message, final String type)    {        try        {            progressDialog.dismiss();            AlertDialog.Builder builder = new AlertDialog.Builder(getContext());            builder.setTitle(Title);            builder.setMessage(Message);            builder.setCancelable(false);            builder.setPositiveButton(                    "OK",                    new DialogInterface.OnClickListener() {                        public void onClick(DialogInterface dialog, int id)                        {                            dialog.cancel();                            if(type.equalsIgnoreCase("saveDetails"))                            {                                FragmentManager fragmentManager = getFragmentManager();                                StudentHomeFragment studentHomeFragment = (StudentHomeFragment)fragmentManager.findFragmentByTag("NMIMS");                                studentHomeFragment.loadHomePageData();                                ((StudentDrawer)getActivity()).loadProfileData();                            }                        }                    });            AlertDialog alert = builder.create();            alert.show();        }        catch (Exception e)        {            e.printStackTrace();        }    }}