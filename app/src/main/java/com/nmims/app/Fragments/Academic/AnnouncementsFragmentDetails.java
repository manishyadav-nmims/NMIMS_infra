package com.nmims.app.Fragments.Academic;import android.Manifest;import android.app.DownloadManager;import android.content.DialogInterface;import android.content.Intent;import android.content.pm.PackageManager;import android.database.Cursor;import android.net.Uri;import android.os.Bundle;import android.os.Environment;import android.provider.Settings;import android.text.Html;import android.text.TextUtils;import android.text.method.LinkMovementMethod;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.RelativeLayout;import android.widget.TextView;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AlertDialog;import androidx.core.app.ActivityCompat;import androidx.fragment.app.Fragment;import com.google.firebase.analytics.FirebaseAnalytics;import com.nmims.app.Activities.StudentDrawer;import com.nmims.app.Adapters.AnnouncementsListRecyclerviewAdapter;import com.nmims.app.Helpers.CommonMethods;import com.nmims.app.Helpers.Config;import com.nmims.app.Helpers.DBHelper;import com.nmims.app.Helpers.MyLog;import com.nmims.app.Helpers.MyToast;import com.nmims.app.Helpers.NMIMSApplication;import com.nmims.app.Models.AnnouncementsDataModel;import com.nmims.app.Models.MyPermission;import com.nmims.app.R;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Locale;import static android.content.Context.DOWNLOAD_SERVICE;public class AnnouncementsFragmentDetails extends Fragment{    private TextView subjectDetails, announcementsTime, descriptionsAnnouncements;    private Button downloadAnnouncementsFileBtn;    private AnnouncementsDataModel announcementsDataModel;    private String announcementLink = null, announcementId = null, announcementFilePath = null, userName="", sharedPrefschoolName="";    private RelativeLayout announcementsFragDetails;    private int REQUEST_PERMISSIONS_CODE_WRITE_STORAGE = 6;    private DBHelper dbHelper;    private String status = null,  myApiUrlLms="", token="";    @Override    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)    {        View view = inflater.inflate(R.layout.fragment_announcements_details, container, false);        ((StudentDrawer)getActivity()).showAnnouncements(false);        ((StudentDrawer)getActivity()).setActionBarTitle("Announcements");        CommonMethods.handleSSLHandshake();        subjectDetails = view.findViewById(R.id.subjectDetails);        announcementsTime = view.findViewById(R.id.announcementsTime);        announcementsFragDetails = view.findViewById(R.id.announcementsFragDetails);        announcementsFragDetails.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                //Dont Delete            }        });        descriptionsAnnouncements = view.findViewById(R.id.descriptionsAnnouncements);        downloadAnnouncementsFileBtn = view.findViewById(R.id.downloadAnnouncementsFileBtn);        //////////ADDING FIREBASE EVENTS///////////////        FirebaseAnalytics mFirebaseAnalytics = FirebaseAnalytics.getInstance(getContext());        Bundle params = new Bundle();        params.putString("announcements_fragment_details", "announcements_fragment_details");        mFirebaseAnalytics.logEvent("Announcements_Fragment_Details", params);        ///////////////////////////////////////////////        init();        return view;    }    private void init()    {        Bundle bundle = this.getArguments();        announcementsDataModel = bundle.getParcelable("announcementsDataModel");        subjectDetails.setText(announcementsDataModel.getSubject());        announcementFilePath = announcementsDataModel.getFilePath();        new MyLog(NMIMSApplication.getAppContext()).debug("announcementFilePath",announcementFilePath);        dbHelper = new DBHelper(getContext());        myApiUrlLms = dbHelper.getBackEndControl("myApiUrlLms").getValue();        //myApiUrlLms = Config.myApiUrlLms;        Cursor cursor = dbHelper.getUserDataValues();        if (cursor!= null)        {            if(cursor.moveToFirst())            {                token = cursor.getString(cursor.getColumnIndex("token"));                userName = cursor.getString(cursor.getColumnIndex("sapid"));                new MyLog(NMIMSApplication.getAppContext()).debug("username", userName);                sharedPrefschoolName = cursor.getString(cursor.getColumnIndex("currentSchool"));					   //sharedPrefschoolName = Config.sharedPrefschoolName;                new MyLog(NMIMSApplication.getAppContext()).debug("sharedPrefschoolName1", sharedPrefschoolName);            }        }        announcementId = announcementsDataModel.getId();        new MyLog(NMIMSApplication.getAppContext()).debug("announcementId",announcementId);        announcementLink = myApiUrlLms + sharedPrefschoolName+"/sendAnnouncementFileForApp?id="+announcementId+"&username="+userName;        new MyLog(NMIMSApplication.getAppContext()).debug("announcementLink",announcementLink);        Calendar calendar = Calendar.getInstance();        String currentDate  =  new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH).format(calendar.getTime());        int diff = AnnouncementsListRecyclerviewAdapter.getCountOfDays(announcementsDataModel.getStartDate(),currentDate);        announcementsTime.setText("Sent :"+ diff + " days ago");        descriptionsAnnouncements.setText(Html.fromHtml(announcementsDataModel.getDescription()));        descriptionsAnnouncements.setMovementMethod(LinkMovementMethod.getInstance());        new MyLog(NMIMSApplication.getAppContext()).debug("getDescription", announcementsDataModel.getDescription());        if(announcementsDataModel.getFilePath() != null && !TextUtils.isEmpty(announcementsDataModel.getFilePath()))        {            downloadAnnouncementsFileBtn.setVisibility(View.VISIBLE);        }        downloadAnnouncementsFileBtn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v)            {                if (ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)                {                    dbHelper = new DBHelper(getContext());                    status = dbHelper.getMyPermission(1).getPermissionStatus();                    if(!TextUtils.isEmpty(status) && status.equals("Y"))                    {                        new MyLog(NMIMSApplication.getAppContext()).debug("StoragePermStatus", status);                        downloadAttachments(announcementLink);                    }                    else if(!TextUtils.isEmpty(status) && status.equals("N"))                    {                        new MyLog(NMIMSApplication.getAppContext()).debug("StoragePermStatus", status);                        //user has checked dont ask again                        storagePermissionPopUp();                    }                    else                    {                        if (ActivityCompat.checkSelfPermission(getContext(), Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)                        {                            requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUEST_PERMISSIONS_CODE_WRITE_STORAGE);                        }                    }                }                else                {                    downloadAttachments(announcementLink);                }            }        });    }    private void downloadAttachments(String url)    {        try        {            String extension = null;            long output;            DownloadManager downloadManager = (DownloadManager) getActivity().getSystemService(DOWNLOAD_SERVICE);            DownloadManager.Request request = new DownloadManager.Request(Uri.parse(url));            request.addRequestHeader("token", token);		    request.addRequestHeader("username", userName);            if(announcementFilePath.contains("."))            {                extension = announcementFilePath.substring(announcementFilePath.lastIndexOf("."));            }            new MyLog(NMIMSApplication.getAppContext()).debug("extension",extension);            request.setTitle("Downloading Attachemnts");            request.setDescription(announcementsDataModel.getSubject());            if(announcementFilePath.contains(","))            {                request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, Config.Announcements_Attachments_Path+announcementsDataModel.getSubject()+".zip");            }            else            {                request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, Config.Announcements_Attachments_Path+announcementsDataModel.getSubject()+extension);            }            output = downloadManager.enqueue(request);            request.setShowRunningNotification(true);            request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);            new MyToast(getContext()).showSmallCustomToast("File Downloaded");        }        catch (Exception e)        {            e.printStackTrace();        }    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults)    {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        if (requestCode == REQUEST_PERMISSIONS_CODE_WRITE_STORAGE)        {            if (permissions[0].equals(Manifest.permission.WRITE_EXTERNAL_STORAGE) && grantResults[0] == PackageManager.PERMISSION_GRANTED)            {                new MyLog(NMIMSApplication.getAppContext()).debug("Permission[0]",permissions[0]);                new MyToast(getContext()).showSmallCustomToast("Permission Granted");                dbHelper.deleteMyPermission();                dbHelper.insertMyPermission(new MyPermission("1", Config.StoragePermission,"Y"));            }            else            {                boolean showRationale = false;                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M)                {                    showRationale = shouldShowRequestPermissionRationale( Manifest.permission.WRITE_EXTERNAL_STORAGE );                    if(!showRationale)                    {                        dbHelper.deleteMyPermission();                        dbHelper.insertMyPermission(new MyPermission("1", Config.StoragePermission,"N"));                    }                }            }        }    }    private void storagePermissionPopUp()    {        AlertDialog.Builder builder1 = new AlertDialog.Builder(getContext());        builder1.setTitle("Allow Storage Permission ?");        builder1.setMessage("You need to give permission from SETTINGS to download file. " +                "Press YES to open SETTINGS...");        builder1.setCancelable(true);        builder1.setPositiveButton(                "Yes",                new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int id)                    {                        Intent intent = new Intent();                        intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);                        Uri uri = Uri.fromParts("package", getActivity().getPackageName(), "StudentAssignmentDetailsFragment");                        intent.setData(uri);                        startActivity(intent);                    }                });        builder1.setNegativeButton(                "No",                new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int id) {                        dialog.cancel();                    }                });        AlertDialog alert11 = builder1.create();        alert11.show();    }}