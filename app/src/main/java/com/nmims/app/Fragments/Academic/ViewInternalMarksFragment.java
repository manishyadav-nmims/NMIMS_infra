package com.nmims.app.Fragments.Academic;import android.database.Cursor;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.ProgressBar;import android.widget.RelativeLayout;import android.widget.TextView;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.fragment.app.Fragment;import androidx.fragment.app.FragmentTransaction;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.android.volley.AuthFailureError;import com.android.volley.DefaultRetryPolicy;import com.android.volley.NetworkError;import com.android.volley.NoConnectionError;import com.android.volley.ParseError;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.ServerError;import com.android.volley.TimeoutError;import com.android.volley.VolleyError;import com.android.volley.toolbox.StringRequest;import com.android.volley.toolbox.Volley;import com.google.firebase.analytics.FirebaseAnalytics;import com.nmims.app.Activities.ParentDrawer;import com.nmims.app.Activities.StudentDrawer;import com.nmims.app.Adapters.ViewInternalMarksRecyclerViewAdapter;import com.nmims.app.Helpers.AESEncryption;import com.nmims.app.Helpers.Config;import com.nmims.app.Helpers.DBHelper;import com.nmims.app.Helpers.MyLog;import com.nmims.app.Helpers.NMIMSApplication;import com.nmims.app.Models.InternalMarksDataModel;import com.nmims.app.R;import org.json.JSONArray;import org.json.JSONObject;import java.net.ConnectException;import java.net.SocketException;import java.nio.charset.StandardCharsets;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class ViewInternalMarksFragment extends Fragment{    private RecyclerView internalMarksListRecyclerview;    private ProgressBar IMProgressBar;    private ImageView IMerrorImage;    private TextView IMEmptyResults;    private List<InternalMarksDataModel> internalMarksDataModelList = new ArrayList<>();    private String role="", myApiUrlLms="";    private RequestQueue requestQueue;    private String sharedPrefschoolName="", userName = "", token="";    private RelativeLayout fragment_ViewInternalMarksFragment;    private DBHelper dbHelper;    @Override    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)    {        View view = inflater.inflate(R.layout.fragment_view_marks_internal,container,false);        dbHelper = new DBHelper(getContext());        myApiUrlLms = dbHelper.getBackEndControl("myApiUrlLms").getValue();        //myApiUrlLms = Config.myApiUrlLms;        internalMarksListRecyclerview = view.findViewById(R.id.internalMarksListRecyclerview);        internalMarksListRecyclerview.setHasFixedSize(true);        internalMarksListRecyclerview.setLayoutManager(new LinearLayoutManager(getActivity()));        IMProgressBar = view.findViewById(R.id.IMProgressBar);        IMerrorImage = view.findViewById(R.id.IMerrorImage);        IMEmptyResults = view.findViewById(R.id.IMEmptyResults);        fragment_ViewInternalMarksFragment = view.findViewById(R.id.fragment_ViewInternalMarksFragment);        Cursor cursor = dbHelper.getUserDataValues();        if (cursor!= null)        {            if(cursor.moveToFirst())            {                token = cursor.getString(cursor.getColumnIndex("token"));            }        }        checkRole();        loadInternalMarksList(view);        //////////ADDING FIREBASE EVENTS///////////////        FirebaseAnalytics mFirebaseAnalytics = FirebaseAnalytics.getInstance(getContext());        Bundle params = new Bundle();        params.putString("student_ica_details_fragment", "student_ica_details_fragment");        mFirebaseAnalytics.logEvent("Student_ICA_List_Fragment", params);        ///////////////////////////////////////////////        return view;    }    private void loadInternalMarksList(final View view)    {        try        {            fragment_ViewInternalMarksFragment.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    ////////////////////Dont delete                }            });            IMProgressBar.setVisibility(View.VISIBLE);            new MyLog(NMIMSApplication.getAppContext()).debug("getNewsList", "getNewsList");            if(internalMarksDataModelList.size() > 0)            {                internalMarksDataModelList.clear();            }            final AESEncryption aes = new AESEncryption(getContext());            String URL = myApiUrlLms + sharedPrefschoolName+"/showInternalTotalMarksForApp";            new MyLog(NMIMSApplication.getAppContext()).debug("URL",URL);            requestQueue = Volley.newRequestQueue(view.getContext().getApplicationContext());            Map<String, Object> mapJ = new HashMap<String, Object>();            if(role.contains("ROLE_PARENT"))            {                userName = userName.substring(0,userName.length()-2);            }            mapJ.put("username",userName);            final String mRequestBody = aes.encryptMap(mapJ);            StringRequest stringRequest = new StringRequest(Request.Method.POST, URL, new Response.Listener<String>()            {                @Override                public void onResponse(String response)                {                    String respStr = aes.decrypt(response);                    if(respStr.contains("unauthorised access"))                    {                        IMProgressBar.setVisibility(View.GONE);                        ((StudentDrawer)getActivity()).unauthorizedAccessFound();                        return;                    }                    try                    {                        JSONArray jsonArray = new JSONArray(respStr);                        new MyLog(NMIMSApplication.getAppContext()).debug("jsonArray", String.valueOf(jsonArray.length()));                        if(jsonArray.length() < 1 || jsonArray.length() == 0)                        {                            IMProgressBar.setVisibility(View.INVISIBLE);                            IMEmptyResults.setText("No Data Found");                            IMEmptyResults.setVisibility(View.VISIBLE);                            IMerrorImage.setVisibility(View.VISIBLE);                            internalMarksListRecyclerview.setVisibility(View.INVISIBLE);                        }                        else                        {                            for(int i = 0; i <jsonArray.length(); i++)                            {                                JSONObject jsonResponseObj = jsonArray.getJSONObject(i);                                String icaId="", icaTotalMarks="", active="", finalSubmit="", remarks="", passFailStatus="", internalMarks="",                                        moduleName="", acadYear="", acadSession="", moduleId="", publishedDate="", isAbsent="", createdDate="",                                        lastModifiedDate="", createdBy="", lastModifiedBy="",isErrorRecorded="";                                if(jsonResponseObj.has("icaId"))                                {                                    icaId = jsonResponseObj.getString("icaId");                                }                                if(jsonResponseObj.has("icaTotalMarks"))                                {                                    icaTotalMarks = jsonResponseObj.getString("icaTotalMarks");                                }                                if(jsonResponseObj.has("active"))                                {                                    active = jsonResponseObj.getString("active");                                }                                if(jsonResponseObj.has("finalSubmit"))                                {                                    finalSubmit = jsonResponseObj.getString("finalSubmit");                                }                                if(jsonResponseObj.has("remarks"))                                {                                    remarks = jsonResponseObj.getString("remarks");                                }                                if(jsonResponseObj.has("passFailStatus"))                                {                                    passFailStatus = jsonResponseObj.getString("passFailStatus");                                }                                if(jsonResponseObj.has("internalMarks"))                                {                                    internalMarks = jsonResponseObj.getString("internalMarks");                                }                                if(jsonResponseObj.has("moduleName"))                                {                                    moduleName = jsonResponseObj.getString("moduleName");                                }                                if(jsonResponseObj.has("acadYear"))                                {                                    acadYear = jsonResponseObj.getString("acadYear");                                }                                if(jsonResponseObj.has("acadSession"))                                {                                    acadSession = jsonResponseObj.getString("acadSession");                                }                                if(jsonResponseObj.has("moduleId"))                                {                                    moduleId = jsonResponseObj.getString("moduleId");                                }                                if(jsonResponseObj.has("publishedDate"))                                {                                    publishedDate = jsonResponseObj.getString("publishedDate");                                }                                if(jsonResponseObj.has("isAbsent"))                                {                                    isAbsent = jsonResponseObj.getString("isAbsent");                                }                                if(jsonResponseObj.has("createdDate"))                                {                                    createdDate = jsonResponseObj.getString("createdDate");                                }                                if(jsonResponseObj.has("lastModifiedDate"))                                {                                    lastModifiedDate = jsonResponseObj.getString("lastModifiedDate");                                }                                if(jsonResponseObj.has("createdBy"))                                {                                    createdBy = jsonResponseObj.getString("createdBy");                                }                                if(jsonResponseObj.has("lastModifiedBy"))                                {                                    lastModifiedBy = jsonResponseObj.getString("lastModifiedBy");                                }                                if(jsonResponseObj.has("isErrorRecorded"))                                {                                    isErrorRecorded = jsonResponseObj.getString("isErrorRecorded");                                }                                InternalMarksDataModel internalMarksDataModel = new InternalMarksDataModel(icaId, moduleName, acadYear, icaTotalMarks, remarks, passFailStatus, publishedDate, active, finalSubmit,                                        acadSession, moduleId, isAbsent, createdDate, lastModifiedDate, createdBy, lastModifiedBy, isErrorRecorded, internalMarks);                                internalMarksDataModelList.add(internalMarksDataModel);                            }                           ViewInternalMarksRecyclerViewAdapter internalMarksRecyclerViewAdapter = new ViewInternalMarksRecyclerViewAdapter(getContext(), internalMarksDataModelList, new ViewInternalMarksRecyclerViewAdapter.OpenICADetails() {                               @Override                               public void openInternalMarksDetails(InternalMarksDataModel internalMarksDataModel)                               {                                   Bundle bundle = new Bundle();                                   bundle.putParcelable("internalMarksDataModel", internalMarksDataModel);                                   ViewInternalMarksDetailsFragment viewInternalMarksDetailsFragment = new ViewInternalMarksDetailsFragment();                                   viewInternalMarksDetailsFragment.setArguments(bundle);                                   if(role.contains("ROLE_STUDENT"))                                   {                                       FragmentTransaction ft = getFragmentManager().beginTransaction();                                       ft.add(R.id.StudentHome,viewInternalMarksDetailsFragment);                                       ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);                                       ft.addToBackStack("ICA Marks");                                       ft.commit();                                   }                                   else                                   {                                       FragmentTransaction ft = getFragmentManager().beginTransaction();                                       ft.add(R.id.ParentHome,viewInternalMarksDetailsFragment);                                       ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);                                       ft.addToBackStack("ICA Marks");                                       ft.commit();                                   }                               }                           });                            internalMarksListRecyclerview.setAdapter(internalMarksRecyclerViewAdapter);                            IMProgressBar.setVisibility(View.GONE);                        }                    }                    catch(Exception je)                    {                        IMProgressBar.setVisibility(View.GONE);                        new MyLog(NMIMSApplication.getAppContext()).debug("JSonException",je.getMessage());                        IMEmptyResults.setText("No Data Found");                        IMEmptyResults.setVisibility(View.VISIBLE);                        IMerrorImage.setVisibility(View.VISIBLE);                        IMerrorImage.setImageDrawable(getActivity().getResources().getDrawable(R.drawable.warning));                        internalMarksListRecyclerview.setVisibility(View.GONE);                    }                }            }, new Response.ErrorListener()            {                @Override                public void onErrorResponse(VolleyError error)                {                    IMProgressBar.setVisibility(View.GONE);                    new MyLog(getContext()).debug("LOG_VOLLEY", error.toString());                    if (error instanceof TimeoutError)                    {                        IMEmptyResults.setText("Oops! Connection timeout error!");                        IMEmptyResults.setVisibility(View.VISIBLE);                        internalMarksListRecyclerview.setVisibility(View.GONE);                        IMerrorImage.setVisibility(View.VISIBLE);                        IMerrorImage.setImageDrawable(getActivity().getResources().getDrawable(R.drawable.warning));                    }                    else if (error.getCause() instanceof ConnectException)                    {                        IMEmptyResults.setText("Oops! Unable to reach server!");                        IMEmptyResults.setVisibility(View.VISIBLE);                        internalMarksListRecyclerview.setVisibility(View.GONE);                        IMerrorImage.setVisibility(View.VISIBLE);                        IMerrorImage.setImageDrawable(getActivity().getResources().getDrawable(R.drawable.warning));                    }                    else if (error instanceof NoConnectionError)                    {                        IMEmptyResults.setText("Oops! No Internet Connection Available!");                        IMEmptyResults.setVisibility(View.VISIBLE);                        internalMarksListRecyclerview.setVisibility(View.GONE);                        IMerrorImage.setVisibility(View.VISIBLE);                        IMerrorImage.setImageDrawable(getActivity().getResources().getDrawable(R.drawable.warning));                    }                    else if (error.getCause() instanceof SocketException)                    {                        IMEmptyResults.setText("Oops! We are Sorry Something went wrong. We're working on it now!");                        IMEmptyResults.setVisibility(View.VISIBLE);                        internalMarksListRecyclerview.setVisibility(View.GONE);                        IMerrorImage.setVisibility(View.VISIBLE);                        IMerrorImage.setImageDrawable(getActivity().getResources().getDrawable(R.drawable.warning));                    }                    else if (error instanceof AuthFailureError)                    {                        IMEmptyResults.setText("Oops! Server couldn't find the authenticated request!");                        IMEmptyResults.setVisibility(View.VISIBLE);                        internalMarksListRecyclerview.setVisibility(View.GONE);                        IMerrorImage.setVisibility(View.VISIBLE);                        IMerrorImage.setImageDrawable(getActivity().getResources().getDrawable(R.drawable.warning));                    }                    else if (error instanceof ServerError)                    {                        IMEmptyResults.setText("Oops! No response from server!");                        IMEmptyResults.setVisibility(View.VISIBLE);                        internalMarksListRecyclerview.setVisibility(View.GONE);                        IMerrorImage.setVisibility(View.VISIBLE);                        IMerrorImage.setImageDrawable(getActivity().getResources().getDrawable(R.drawable.warning));                    }                    else if (error instanceof NetworkError)                    {                        IMEmptyResults.setText("Oops! It seems your internet is slow!");                        IMEmptyResults.setVisibility(View.VISIBLE);                        internalMarksListRecyclerview.setVisibility(View.GONE);                        IMerrorImage.setVisibility(View.VISIBLE);                        IMerrorImage.setImageDrawable(getActivity().getResources().getDrawable(R.drawable.warning));                    }                    else if (error instanceof ParseError) {                        IMEmptyResults.setText("Oops! Parse Error (because of invalid json or xml)!");                        IMEmptyResults.setVisibility(View.VISIBLE);                        internalMarksListRecyclerview.setVisibility(View.GONE);                        IMerrorImage.setVisibility(View.VISIBLE);                        IMerrorImage.setImageDrawable(getActivity().getResources().getDrawable(R.drawable.warning));                    }                    else                    {                        IMEmptyResults.setText("Oops! An unknown error occurred!");                        IMEmptyResults.setVisibility(View.VISIBLE);                        internalMarksListRecyclerview.setVisibility(View.GONE);                        IMerrorImage.setVisibility(View.VISIBLE);                        IMerrorImage.setImageDrawable(getActivity().getResources().getDrawable(R.drawable.warning));                    }                }            }){                @Override                public String getBodyContentType() {                    return "application/json; charset=utf-8";                }                @Override                public byte[] getBody() throws AuthFailureError {                    return mRequestBody == null ? null : mRequestBody.getBytes(StandardCharsets.UTF_8);                }                public Map<String, String> getHeaders() throws AuthFailureError {                    Map<String, String> headers = new HashMap<String, String>();                    headers.put("token", token);					headers.put("username", userName);                    return headers;                }            };            stringRequest.setRetryPolicy(new DefaultRetryPolicy(15000,                    DefaultRetryPolicy.DEFAULT_MAX_RETRIES,                    DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));            requestQueue.add(stringRequest);        }        catch (Exception e)        {            new MyLog(NMIMSApplication.getAppContext()).debug("InternalMarks Exception", e.getMessage());        }    }    private void checkRole()    {        DBHelper dbHelper = new DBHelper(getContext());        Cursor cursor = dbHelper.getUserDataValues();        if (cursor!= null)        {            if(cursor.moveToFirst())            {                role= cursor.getString(cursor.getColumnIndex("role"));                sharedPrefschoolName = cursor.getString(cursor.getColumnIndex("currentSchool"));					   //sharedPrefschoolName = Config.sharedPrefschoolName;                userName = cursor.getString(cursor.getColumnIndex("sapid"));                new MyLog(NMIMSApplication.getAppContext()).debug("role", role);                if(role.contains("ROLE_STUDENT"))                {                    ((StudentDrawer)getActivity()).setActionBarTitle("ICA Marks");                    ((StudentDrawer)getActivity()).showAnnouncements(false);                }                else                {                    ((ParentDrawer)getActivity()).setActionBarTitle("ICA Marks");                }            }        }    }}